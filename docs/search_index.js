var documenterSearchIndex = {"docs":
[{"location":"13_関数.html#関数:-[Functions](https://docs.julialang.org/en/v1/manual/functions/)","page":"関数: Functions","title":"関数: Functions","text":"","category":"section"},{"location":"13_関数.html#関数の記述","page":"関数: Functions","title":"関数の記述","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"プログラムミングにおける関数 (function) とは，与えられた引数 (argument)をもとに 一連の処理を実行し，結果を値として返却するコードブロックのことと考えておけばよい．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"Julia言語では関数は function ... end で定義する．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"例として，２つの引数 x, y に対して，和 x+y を返却する関数を定義する．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"function f(x,y)\n    return x + y     # 単に x + y でも同じ動作\nend\n\n@show f(1,2)  # 関数の呼び出し","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"これは，数学の関数と同様に形式で書くこともできる．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"g(x,y) =  x + y\n@show g(1,2)","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"次のように複数の処理を含む関数は，function ... end を用いたほうがわかりやすい．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"function h(x,y)\n    z = x + y\n    println(\"$x + $y = $z\")    # 文字列中で`$x`と書くと，変数`x`に置き換わる． \nend\n@show h(1,2)","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"引数や返り値（返却値）は必ずしも必要ない．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"function sayhello()\n    println(\"Hello!\")    \nend","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"Fortranのように，このような関数をサブルーチンと読んで区別するプログラミング言語もあるが， 大抵の言語では両者は区別されない．","category":"page"},{"location":"13_関数.html#合成関数","page":"関数: Functions","title":"合成関数","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"引数として渡された２つの関数fgの合成関数は 次のように書くことができる．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"  h(x) = g(f(x))","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"note: Note\nJuliaでは関数も変数と同じように引数として渡したり，返却したりできる．","category":"page"},{"location":"13_関数.html#戻り値の指定-return","page":"関数: Functions","title":"戻り値の指定 return","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"関数の戻り値は return で明示できる． return に到達した時点で関数から抜ける． ","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"function mult(x,y)\n    println(\"ここは実行される\") \n    return x*y\n    println(\"return後のコードは実行されない\")  \nend\nmult(2,3)","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"単にreturnと書くと，nothingが返却される．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"function test()\n    println(\"ここは実行される\") \n    return\n    println(\"return後のコードは実行されない\") \nend\n@show test()","category":"page"},{"location":"13_関数.html#オプション引数-(optional-argument)","page":"関数: Functions","title":"オプション引数 (optional argument)","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"引数において，引数名=値と記述するとデフォルト値を指定できる．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"F(x, y=100) = x + y\nF(1,2)\nF(1) # = F(1,100)\nG(x=1, y) = x+y  # Error! optional argumentは後方のみで利用できる","category":"page"},{"location":"13_関数.html#キーワード引数-(keyword-arugment)","page":"関数: Functions","title":"キーワード引数 (keyword arugment)","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"引数をセミコロン;で区切った場合，; 以降は「キーワード引数」というものになる． キーワード引数の順序は自由であるが，キーワード引数は必ず 引数名=値の形で指定する必要がある． ","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"H(x; a, b) = a*x + b\nH(1,2,3) # これはエラーになる\nH(1, a=2, b=3)\nH(1, b=3, a=2)\nH(a=2, b=3, 1)  \nH(a=2, 1, b=3)  ","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"danger: Danger\nキーワード引数と通常の引数の順番を入れ替えて混ぜることもできますが， 読みにくくなるので本講義では非推奨とします．","category":"page"},{"location":"13_関数.html#数学関数:-[Mathematical-Functions](https://docs.julialang.org/en/v1/base/math/#Mathematical-Functions)","page":"関数: Functions","title":"数学関数: Mathematical Functions","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"Juliaでは基本的な数学関数はほとんど標準で実装されている．","category":"page"},{"location":"13_関数.html#基本的関数","page":"関数: Functions","title":"基本的関数","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"数学関数 Julia\nsqrtx sqrt(x)\nxの絶対値 abs(x)\nxの絶対値の2乗 abs2(x)\nxの符号 sign(x)\nx pmod p mod(x, p)\nxを pで割った余り rem(x, p) or x % p\nxを pで割った商 div(x, p)\n※ 商と余りの両方 divrem(x, p)\n階乗 n factorial(n)\n二項係数beginpmatrix p  q endpmatrix binomial(p,q)","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"note: Note\nabs2はルートの計算がないので，それだけ absより速い．\nrem と% は割られる値が負の場合は動作が異なる．","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"abs(-2)\nsign(-1.23)\nsign(0.0)\nmod(100,3)\nmod(-100, 3)\nmod(3.5, 3)\n3.5 % 3  # mod(3.5, 3) と同じ\nmod(-3.5, 3)\n-3.5 % 3 # mod(-3.5, 3) とは異なるので注意\ndivrem(3.5, 3)\nfactorial(5)\nbinomial(4,2)","category":"page"},{"location":"13_関数.html#三角関数，指数関数，対数関数","page":"関数: Functions","title":"三角関数，指数関数，対数関数","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"数学関数 Julia\nsin(x) sin(x)\ncos(x) cos(x)\ntan(x) tan(x)\narcsin(x) asin(x)\narccos(x) acos(x)\narctan(x) atan(x)\nexp(x) exp(x)\nlog_e(x) log(x)\nlog_10(x) log10(x)\nlog_2(x) log2(x)\nlog_a(x) log(a,x)","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"note: Note\ncotなどの逆数系や，双曲線関数・逆双曲線関数も一通り実装されているがここでは省略する．\nsin(pi x)やcos(pi x) の計算には sinpi(x), cospi(x) といった関数が用意されていてこちらのほうが精度や効率の点で優れている（はず）","category":"page"},{"location":"13_関数.html#複素数","page":"関数: Functions","title":"複素数","text":"","category":"section"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"数学関数 Julia\n実部 mathrmRe z real(z)\n虚部 mathrmIm z imag(z)\nz の絶対値 abs(z)\narg z in (-pi pi angle(z)","category":"page"},{"location":"13_関数.html","page":"関数: Functions","title":"関数: Functions","text":"z = 1.0+sqrt(3)*im    # `im`は虚数単位\nreal(z)\nimag(z)\nabs(z)\nangle(z)/pi\nangle(0)/pi\nangle(-1)/pi\nangle(1im)/pi\nangle(-1im)/pi","category":"page"},{"location":"14_浮動小数点数.html#浮動小数点数","page":"浮動小数点数","title":"浮動小数点数","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"計算機において小数は浮動小数点数 (Floating Point Number)として実装されている．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"例えば，10 進数の浮動小数点数は $ 1.234 \\times 10^8 $ という形で表されるような数である．ただし，仮数部(1234)の桁数は固定で，指数 m の範囲も有界である． 実際にはこれらに，Inf （無限大） や NaN (Not a Number) が付け加わる． 浮動小数点数の標準規格はIEEE754で策定されている． したがって，計算機における浮動小数点数とその演算は，数学の実数とは異なるものであることに注意．","category":"page"},{"location":"14_浮動小数点数.html#単精度と倍精度","page":"浮動小数点数","title":"単精度と倍精度","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"多くのハードウェアやプログラミング言語で実装されている浮動小数点数は倍精度 (double precision) と単精度 (single precision) の２種類である． Juliaでは，Float64が倍精度に，Float32が単精度に対応している． 特別な理由がない限り，普通は倍精度 Float64 を用いる．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"変数に小数を代入すると，暗黙のうちに Float64 と解釈される．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"x = 0.1\ntypeof(x)","category":"page"},{"location":"14_浮動小数点数.html#指数表記","page":"浮動小数点数","title":"指数表記","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"浮動小数点数は次のように e あるいは E の記号の後ろに指数を表記する．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"0.0000012345","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"1.2345e-6 は $ 1.234 \\times 10^{-6} $ に等しい． 1.0e8 あるいは 1.0e+8 は 10^8の浮動小数点数を表す． 1e8 や 1e+8 と書いても同じことである．整数型にはならないことに注意．","category":"page"},{"location":"14_浮動小数点数.html#丸め誤差","page":"浮動小数点数","title":"丸め誤差","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"浮動小数点数どうしを四則演算して得られた値は浮動小数点数になるとは限らない．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"1.111111111^2   ","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"正確な値は 1111111111^2 = 1234567900987654321 であり，この場合は下4桁分が切り捨てられている． このように演算結果の値に近い浮動小数点数への近似を 丸め (rounding) といい， その際に生じる誤差を 丸め誤差 (rounding error)  という． 丸め誤差は浮動小数点数の計算において，ほぼ必然的に発生する． 丸め方には，正/負の無限大の方向，原点方向，最近点への丸めなどがある．","category":"page"},{"location":"14_浮動小数点数.html#オーバーフロー","page":"浮動小数点数","title":"オーバーフロー","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"倍精度で扱える最大の正の数はfloatmaxで取得できる． 浮動小数点数の演算の結果，このx_maxを超えた場合，無限大を表す Inf となる． このような現象を overflow という．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"x_max = floatmax(Float64)\n2 * x_max ","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"浮動小数点数には先頭桁が0の非正規数も実装されている． 最小の正の非正規数は eps(0.0) で取得できる．演算結果がこれを下回ると 0.0 に丸められることがあり，これを underflow という．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"subnormal_min = eps(0.0)\nsubnormal_min/2  ","category":"page"},{"location":"14_浮動小数点数.html#NaN-(Not-a-Number)","page":"浮動小数点数","title":"NaN (Not a Number)","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"浮動小数点数において不正な演算を行った結果，NaN という記号（正確には特別な浮動小数点数のひとつ）が発生することがある． 例えば，0を0で割ると Nan が発生する．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"0/0","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"ちなみに0以外の正の浮動小数点数をゼロで割るとInfになる．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"1/0","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"note: Note\nPython3ではゼロ除算は ZeroDivisionErrorというエラーを返し，NaNにはなりません． 処理系によっては動作がまちまちなので注意．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"これ以外にも，Infに関する四則演算の結果，NaN が発生することがある． ","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"Inf + Inf\nInf - Inf    # ∞ - ∞\nInf * Inf    \nInf * 0      # ∞ ✕ 0\nInf / Inf    # ∞ ÷ ∞","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"不定形の極限に対応するような演算を行うと NaN が発生すると覚えておけばよい．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"danger: レポート作成上の注意\nInf や NaN の発生を前提としたコード設計はしないようにしてください． Inf や NaNの挙動を完全に把握することは非常に困難で，bug （プログラムにおける予期しない動作やエラー） を生みやすいです．さらに，読み手にとっても理解しにくいコードになります．ちなみにJuliaでは isfinite(x)や isnan(x) で x が Inf あるいは NaN であるかどうかの判定ができます．","category":"page"},{"location":"14_浮動小数点数.html#情報落ち","page":"浮動小数点数","title":"情報落ち","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"浮動小数点数では，非常に小さい値を加えた場合（machine epsilon)，丸めによって値が変化しないことがある． これを情報落ちという．1.0 に eps(1.0) = 2.220446049250313e-16 より小さい値を加えても結果は変わらない． 例えば，","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"1.0 + 1.0e-16","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"上のような例では情報落ちを回避することはできないが， 計算順序を変えることで情報落ちを回避できることがある．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"1.0e-16 + 1.0 - 1.0\n1.0e-16 + (1.0 - 1.0)","category":"page"},{"location":"14_浮動小数点数.html#桁落ち","page":"浮動小数点数","title":"桁落ち","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"近い値の２つの浮動小数点数を引き算すると有効桁数が減少する（桁落ち）． 例えば，12345 - 12344 = 00001 = 1 times 10^4 は，有効桁数5桁どうしを引き算した結果，有効桁数が1桁に減っている． したがって，浮動小数点数の計算では近い値を持つもの同士の減算はできる限り避けたほうがよい．  ","category":"page"},{"location":"14_浮動小数点数.html#桁落ちの例と回避法","page":"浮動小数点数","title":"桁落ちの例と回避法","text":"","category":"section"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"b を正の実数とする． 2次方程式　f(x) = x^2 - 2bx + 1 = 0 の解は，解の公式より","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"  alpha = b - sqrtb^2 - 1 quad beta = b + sqrtb^2 - 1 ","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"と表される． b^2 gg 1の場合， alphaをこのまま計算すると， sqrtb^2 - 1 approx b であるから桁落ちが生じる．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"b = 1e8  # 1e8 = 10^8 \nalpha = b - sqrt(b^2-1)","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"計算値は 0.0 であるが，これが解ではないことは代入してみれば明らかである．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"このような場合でも，式変形で桁落ちを避けることができる．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":" b - sqrtb^2 - 1  = frac1b + sqrtb^2 - 1 ","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"上の式で計算してみると，","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"b = 1e8\nx = 1/(b + sqrt(b^2-1))","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"warning: Warning\n上のalphaの計算式は万能ではなく，b0 かつ b^2 gg 1の場合は桁落ちが発生する．","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"","category":"page"},{"location":"14_浮動小数点数.html","page":"浮動小数点数","title":"浮動小数点数","text":"note: Note\n0.0 と 5.0e-9 は一見して大した違いがないように思われるかもしれませんが，  相対誤差に関してはかなり大きな開きがあります．桁落ちを考慮せずに素朴に計算した場合の数値解 0.0 に対する相対誤差は dfracalpha - 00alpha = 1一方で， 有理化して桁落ちを回避した数値解の相対誤差は， 252times 10^-17 未満であることが示せます．まず，epsilon = 126times 10^-25 とおく．beginaligned\n f(5 times10^-9) = 25 times 10^-18  0 \n f(5 times10^-9 + epsilon) \n = (5 times10^-9 + epsilon)^2 -2times 10^8 epsilon  \n = 25 times 10^-17 + 10^-8 epsilon + epsilon^2  - 252 times 10^-17  0\nendaligned   中間値の定理より， alpha in (5times 10^-9 5times 10^-9+epsilon) となる． よって，5.0e-9 の絶対誤差は alpha - 5times 10^-9  epsilon = 126times 10^-25 と評価される． 5.0e-9 の相対誤差は， dfracalpha - 5times 10^-9alpha  dfrac126times 10^-255times 10^-9 = 252times 10^-17 と評価される．","category":"page"},{"location":"A01_PyPlot.html#PyPlotによるグラフ描画","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"","category":"section"},{"location":"A01_PyPlot.html#PyPlot.jl-パッケージによるグラフ描画","page":"PyPlotによるグラフ描画","title":"PyPlot.jl パッケージによるグラフ描画","text":"","category":"section"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"Pythonには matplotlib という有名な描画ライブラリがあり， PyPlotというインターフェースを介してグラフを描画することができる．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"ここでは，Juliaから PyPlotを呼び出すパッケージ（インターフェース） PyPlot.jl を使ってグラフを描画する方法を説明する．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"note: Note\nPyPlot.jl は PyPlotのインターフェースなので，基本的には （Pythonの）PyPlotと同じ方法で動作する． 公式のチュートリアル に書いてあるPythonコードをJulia向けに少し書き直せばそのまま動く（はず）．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"note: Note\nJulia言語の標準的な描画パッケージは現時点では存在しないが， 有名なものとしては Plots.jl というパッケージがある．． Plots.jl は様々な描画ライブラリに対するフロントエンドであり， GR や PyPlot などといった描画ライブラリを呼び出すことができる（このようなライブラリをバックエンドという）． GR は PyPlotに比べて簡単に使えるので便利だが，まだ v1.0未満（現時点で v0.66.0）のためか，細かいところで完成度の低い印象がある．","category":"page"},{"location":"A01_PyPlot.html#準備","page":"PyPlotによるグラフ描画","title":"準備","text":"","category":"section"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"Pythonライブラリを呼び出すためのPyCallと，matplotlibをあらかじめインストールしておく必要がある．","category":"page"},{"location":"A01_PyPlot.html#matplotlibのインストール","page":"PyPlotによるグラフ描画","title":"matplotlibのインストール","text":"","category":"section"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"Python側でmatplotlibのインストールを行う．例えば，pipコマンドで次を実行する．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"$ pip install matplotlib","category":"page"},{"location":"A01_PyPlot.html#PyCallのインストール","page":"PyPlotによるグラフ描画","title":"PyCallのインストール","text":"","category":"section"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"Julia側でPyCallのインストールを行う． インストールの手順はこちらを参照． 基本的には pkg> add PyCall で問題なくインストールされるが． 環境によってはエラーが発生するようなので要注意．","category":"page"},{"location":"A01_PyPlot.html#PyPlot.jlパッケージの追加","page":"PyPlotによるグラフ描画","title":"PyPlot.jlパッケージの追加","text":"","category":"section"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"PyCallとmatplotlibが適切にインストールされていれば特に問題なく終わるはず．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"$ julia\njulia> ]  \npkg> add PyPlot\n [...]","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"動作確認として，01times 01内にランダムに10個の点を取り，順番に線を結んだグラフを描いてみる．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"using PyPlot\nclf()        # 描画のクリア\nplot(rand(10), rand(10), marker=\"o\");\nsavefig(\"plot-test.png\"); \nclose()     # プロット閉じる．実行時には外してください．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"(Image: plot)","category":"page"},{"location":"A01_PyPlot.html#グラフ描画:-plot","page":"PyPlotによるグラフ描画","title":"グラフ描画: plot","text":"","category":"section"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"using PyPlot\n#clf()              # 描画のクリア\nfigure()      # 直前に描いたグラフと重なるのを防ぐため\ngrid()\nx = -2pi:0.1pi:2pi    \nplot(x, sin.(x))  \nsavefig(\"plot-sin.png\")\nclose()     # プロット閉じる．実行時には外してください．","category":"page"},{"location":"A01_PyPlot.html","page":"PyPlotによるグラフ描画","title":"PyPlotによるグラフ描画","text":"(Image: plot)","category":"page"},{"location":"11_変数.html#変数:-[Variables](https://docs.julialang.org/en/v1/manual/variables/#man-variables)","page":"変数: Variables","title":"変数: Variables","text":"","category":"section"},{"location":"11_変数.html#変数の宣言","page":"変数: Variables","title":"変数の宣言","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"プログラミング言語における変数とは値や文字列などを格納する箱のようなものである．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"Juliaでは 変数名 = 値 の形で記述することで，変数の宣言と値の代入が行われる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 123      ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"プログラミング言語における = は等号ではなく代入を表す． 既存の変数に別の値を代入すると，もちろん変数の値は更新される．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 1\nx = 2\n@show x;","category":"page"},{"location":"11_変数.html#変数に関する四則演算の省略記法","page":"変数: Variables","title":"変数に関する四則演算の省略記法","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"数値*変数の場合，変数の前の*を省略可能．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 1\n2x + 1     ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = x + a は x += a と略記できる． ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 1\nx += 100","category":"page"},{"location":"11_変数.html#変数の文字列化","page":"変数: Variables","title":"変数の文字列化","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"xを変数とする．文字列リテラル中に$x と書くと， 変数xの値が文字列に埋め込まれる．同様に $(式)と書くと 式が評価（計算）されて文字列として埋め込まれる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 16\nprintln(\"x is $x\")\nprintln(\"The square root of x is $(sqrt(x))\")","category":"page"},{"location":"11_変数.html#@show-マクロ:-[Base.@show](https://docs.julialang.org/en/v1/base/base/#Base.@show)","page":"変数: Variables","title":"@show マクロ: Base.@show","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"@show 変数 or 式 で変数表示できる． 変数のところに式を書くこともできる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 10\n@show x\n@show x^2 x^3 x^4;","category":"page"},{"location":"11_変数.html#@time-マクロ:-[Base.@show](https://docs.julialang.org/en/v1/base/base/#Base.@time)","page":"変数: Variables","title":"@time マクロ: Base.@show","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"与えられた式を実行するのにかかった時間と allocation (メモリ割り当て) の総量を表示する．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"@time sleep(0.5)    # `sleep(t)`は `t`[s]だけ実行を停止するコマンド ","category":"page"},{"location":"11_変数.html#変数のスコープ","page":"変数: Variables","title":"変数のスコープ","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"変数にはスコープ（有効範囲）の違いによってグローバル変数とローカル変数の２種類に分けられる． 通常はどこでも参照可能なグローバル変数になる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"スコープ範囲を作り出すコマンドとして，例えば let ... end がある． let ... end で囲まれた部分で宣言した変数のスコープはコードブロック内に限定される． つまり，暗黙のうちにローカル変数となる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"begin\nfoo = 1          # グローバル変数\n@show foo        # メタ構文変数： 特に意味のない変数名．\n  let\n    foo = \"local variable\"    # ローカル変数\n      @show foo\n  end\n@show foo       # グローバル変数の foo\nend;","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"662\" height=\"209\" style=\"\n        width:662px;\n        height:209px;\n        background: #FFF;\n        fill: none;\n\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\"/>\n        \n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"role-diagram-draw-area\"><g class=\"shapes-region\" style=\"stroke: black; fill: none;\"><g class=\"composite-shape\"><path class=\"real\" d=\" M32.5,86 C32.5,75.51 41.01,67 51.5,67 L289.5,67 C299.99,67 308.5,75.51 308.5,86 L308.5,143 C308.5,153.49 299.99,162 289.5,162 L51.5,162 C41.01,162 32.5,153.49 32.5,143 Z\" style=\"stroke-width: 3; stroke: rgb(184, 233, 134); fill: none; fill-opacity: 1; stroke-opacity: 1;\"/></g><g/></g><g/><g/><g/></svg>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"660\" height=\"207\" style=\"width:660px;height:207px;font-family:Asana-Math, Asana;background:#FFF;\"><g><g><g><g transform=\"matrix(1,0,0,1,29,35.5)\"><path transform=\"matrix(0.018,0,0,-0.018,0,0)\" d=\"M35 38C35 3 57 0 72 0L362 0C378 0 402 2 402 37C402 75 376 75 365 75L260 75L260 369L376 369C396 369 416 374 416 405C416 443 392 444 376 444L260 444L260 478C260 494 257 540 337 540C344 540 349 540 358 539C369 518 386 514 396 514C417 514 437 532 437 557C437 580 421 615 353 615C274 615 177 587 177 477L177 444L81 444C47 444 43 424 43 404C43 386 51 369 81 369L177 369L177 75L73 75C57 75 35 73 35 38ZM577 222C577 84 662 -4 786 -4C911 -4 997 82 997 222C997 363 910 450 787 450C664 450 577 366 577 222ZM661 231C661 336 728 375 787 375C861 375 913 320 913 230C913 128 858 71 787 71C735 71 661 108 661 231ZM1102 222C1102 84 1187 -4 1311 -4C1436 -4 1522 82 1522 222C1522 363 1435 450 1312 450C1189 450 1102 366 1102 222ZM1186 231C1186 336 1253 375 1312 375C1386 375 1438 320 1438 230C1438 128 1383 71 1312 71C1260 71 1186 108 1186 231Z\" stroke=\"rgb(74,144,226)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(74,144,226)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,57.3515625,35.5)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M562 382C562 371 567 350 599 350L977 350C1005 350 1011 371 1011 381C1011 393 1006 412 972 412L603 412C566 412 562 391 562 382ZM563 230C563 221 567 200 600 199L971 199C1005 199 1011 219 1011 230C1011 237 1008 261 974 261L599 261C566 261 563 239 563 230ZM1680 469C1680 444 1698 439 1713 439C1732 439 1773 445 1817 483L1817 61L1726 61C1710 61 1686 61 1686 30C1686 0 1711 0 1726 0L1977 0C1992 0 2017 0 2017 30C2017 61 1993 61 1977 61L1886 61L1886 581C1886 597 1886 622 1856 622C1837 622 1831 610 1826 598C1788 513 1736 502 1717 500C1701 499 1680 497 1680 469Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g><g><g><g transform=\"matrix(1,0,0,1,29,60.6953125)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M44 306C44 127 166 -6 306 -6C396 -6 480 51 480 80C480 108 452 108 442 108C425 108 422 108 412 98C377 66 339 55 305 55C197 55 100 163 100 305C100 454 201 556 304 556C332 556 377 546 400 485C397 487 369 505 336 505C256 505 191 419 191 306C191 187 261 106 335 106C384 106 480 148 480 321C480 386 480 617 304 617C168 617 44 486 44 306ZM247 305C247 389 293 444 335 444C380 444 424 386 424 305C424 224 379 167 336 167C289 167 247 227 247 305ZM597 35C597 19 597 -6 627 -6C636 -6 652 -5 664 32C713 -4 766 -6 794 -6C952 -6 984 77 984 125C984 229 855 250 823 255C800 259 780 262 755 267C726 271 658 283 658 322C658 348 690 379 785 379C868 379 882 349 885 323C886 306 888 289 919 289C954 289 954 310 954 330L954 399C954 415 954 440 924 440C900 440 896 426 894 419C850 440 806 440 787 440C620 440 597 358 597 322C597 230 702 213 794 199C843 191 923 178 923 125C923 88 886 55 795 55C748 55 692 66 667 144C662 162 658 173 632 173C597 173 597 152 597 132ZM1062 30C1062 0 1088 0 1102 0L1261 0C1275 0 1301 0 1301 30C1301 61 1276 61 1260 61L1216 61L1216 238C1216 338 1290 376 1341 376C1394 376 1408 348 1408 288L1408 61L1369 61C1353 61 1328 61 1328 30C1328 0 1355 0 1369 0L1522 0C1536 0 1562 0 1562 30C1562 61 1537 61 1521 61L1477 61L1477 293C1477 394 1426 437 1347 437C1280 437 1235 403 1216 384L1216 570C1216 601 1210 611 1176 611L1103 611C1087 611 1062 611 1062 580C1062 550 1088 550 1102 550L1147 550L1147 61L1103 61C1087 61 1062 61 1062 30ZM1632 216C1632 89 1727 -6 1837 -6C1947 -6 2042 90 2042 216C2042 341 1949 440 1837 440C1725 440 1632 341 1632 216ZM1701 223C1701 314 1766 379 1837 379C1909 379 1973 314 1973 223C1973 130 1911 55 1837 55C1763 55 1701 130 1701 223ZM2116 401C2116 370 2137 370 2167 370L2227 34C2231 11 2234 -4 2274 -4C2314 -4 2317 5 2335 66C2360 154 2361 168 2364 190L2365 190C2370 138 2407 21 2411 13C2423 -4 2441 -4 2453 -4C2490 -4 2493 12 2497 34L2557 370C2587 370 2608 370 2608 401C2608 431 2584 431 2566 431L2451 431C2433 431 2409 431 2409 401C2409 370 2432 370 2451 370L2500 370L2450 72L2449 72C2445 98 2432 144 2420 185C2402 248 2399 259 2364 259C2354 259 2335 259 2324 237C2321 230 2281 92 2277 72L2276 72L2224 370L2273 370C2291 370 2315 370 2315 400C2315 431 2292 431 2273 431L2158 431C2140 431 2116 431 2116 401Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,76.25,60.6953125)\"><path transform=\"matrix(0.018,0,0,-0.018,0,0)\" d=\"M35 38C35 3 57 0 72 0L362 0C378 0 402 2 402 37C402 75 376 75 365 75L260 75L260 369L376 369C396 369 416 374 416 405C416 443 392 444 376 444L260 444L260 478C260 494 257 540 337 540C344 540 349 540 358 539C369 518 386 514 396 514C417 514 437 532 437 557C437 580 421 615 353 615C274 615 177 587 177 477L177 444L81 444C47 444 43 424 43 404C43 386 51 369 81 369L177 369L177 75L73 75C57 75 35 73 35 38ZM577 222C577 84 662 -4 786 -4C911 -4 997 82 997 222C997 363 910 450 787 450C664 450 577 366 577 222ZM661 231C661 336 728 375 787 375C861 375 913 320 913 230C913 128 858 71 787 71C735 71 661 108 661 231ZM1102 222C1102 84 1187 -4 1311 -4C1436 -4 1522 82 1522 222C1522 363 1435 450 1312 450C1189 450 1102 366 1102 222ZM1186 231C1186 336 1253 375 1312 375C1386 375 1438 320 1438 230C1438 128 1383 71 1312 71C1260 71 1186 108 1186 231Z\" stroke=\"rgb(74,144,226)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(74,144,226)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,104.6015625,60.6953125)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g><g><g><g transform=\"matrix(1,0,0,1,29,82.890625)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M1108 30C1108 0 1134 0 1148 0L1477 0C1492 0 1517 0 1517 30C1517 61 1493 61 1477 61L1347 61L1347 570C1347 601 1341 611 1307 611L1149 611C1133 611 1108 611 1108 580C1108 550 1134 550 1148 550L1278 550L1278 61L1149 61C1133 61 1108 61 1108 30ZM1630 217C1630 95 1731 -6 1860 -6C1992 -6 2039 84 2039 109C2039 137 2010 137 2004 137C1986 137 1978 134 1971 115C1949 64 1895 55 1867 55C1792 55 1717 105 1701 191L1999 191C2020 191 2039 191 2039 228C2039 342 1975 440 1845 440C1726 440 1630 340 1630 217ZM1702 251C1716 324 1775 379 1845 379C1897 379 1959 354 1968 251ZM2125 400C2125 370 2150 370 2165 370L2253 370L2253 126C2253 30 2321 -6 2394 -6C2468 -6 2549 37 2549 126C2549 144 2549 165 2514 165C2481 165 2480 144 2480 127C2479 65 2422 55 2399 55C2322 55 2322 107 2322 132L2322 370L2486 370C2501 370 2526 370 2526 400C2526 431 2502 431 2486 431L2322 431L2322 513C2322 532 2322 554 2288 554C2253 554 2253 533 2253 513L2253 431L2166 431C2150 431 2125 431 2125 400Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g><g><g><g transform=\"matrix(1,0,0,1,29,107.890625)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,60.5,107.890625)\"><path transform=\"matrix(0.018,0,0,-0.018,0,0)\" d=\"M35 38C35 3 57 0 72 0L362 0C378 0 402 2 402 37C402 75 376 75 365 75L260 75L260 369L376 369C396 369 416 374 416 405C416 443 392 444 376 444L260 444L260 478C260 494 257 540 337 540C344 540 349 540 358 539C369 518 386 514 396 514C417 514 437 532 437 557C437 580 421 615 353 615C274 615 177 587 177 477L177 444L81 444C47 444 43 424 43 404C43 386 51 369 81 369L177 369L177 75L73 75C57 75 35 73 35 38ZM577 222C577 84 662 -4 786 -4C911 -4 997 82 997 222C997 363 910 450 787 450C664 450 577 366 577 222ZM661 231C661 336 728 375 787 375C861 375 913 320 913 230C913 128 858 71 787 71C735 71 661 108 661 231ZM1102 222C1102 84 1187 -4 1311 -4C1436 -4 1522 82 1522 222C1522 363 1435 450 1312 450C1189 450 1102 366 1102 222ZM1186 231C1186 336 1253 375 1312 375C1386 375 1438 320 1438 230C1438 128 1383 71 1312 71C1260 71 1186 108 1186 231Z\" stroke=\"rgb(126,211,33)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(126,211,33)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,88.8515625,107.890625)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M562 382C562 371 567 350 599 350L977 350C1005 350 1011 371 1011 381C1011 393 1006 412 972 412L603 412C566 412 562 391 562 382ZM563 230C563 221 567 200 600 199L971 199C1005 199 1011 219 1011 230C1011 237 1008 261 974 261L599 261C566 261 563 239 563 230ZM1704 575C1704 568 1713 435 1717 365C1718 356 1718 328 1749 328C1780 328 1780 355 1781 368C1785 437 1793 568 1793 575C1793 607 1769 621 1749 621C1728 621 1704 606 1704 575ZM1880 579C1880 568 1886 483 1893 365C1893 361 1892 328 1924 328C1955 328 1955 353 1956 368C1960 437 1969 568 1969 575C1969 612 1939 621 1925 621C1900 621 1880 601 1880 579ZM2158 30C2158 0 2184 0 2198 0L2527 0C2542 0 2567 0 2567 30C2567 61 2543 61 2527 61L2397 61L2397 570C2397 601 2391 611 2357 611L2199 611C2183 611 2158 611 2158 580C2158 550 2184 550 2198 550L2328 550L2328 61L2199 61C2183 61 2158 61 2158 30ZM2682 216C2682 89 2777 -6 2887 -6C2997 -6 3092 90 3092 216C3092 341 2999 440 2887 440C2775 440 2682 341 2682 216ZM2751 223C2751 314 2816 379 2887 379C2959 379 3023 314 3023 223C3023 130 2961 55 2887 55C2813 55 2751 130 2751 223ZM3223 216C3223 96 3317 -6 3443 -6C3582 -6 3616 92 3616 109C3616 137 3587 137 3581 137C3565 137 3555 135 3548 115C3542 102 3523 55 3449 55C3364 55 3292 125 3292 216C3292 264 3320 379 3455 379C3476 379 3515 379 3515 370C3516 335 3535 321 3559 321C3583 321 3604 338 3604 367C3604 440 3500 440 3455 440C3283 440 3223 304 3223 216ZM3730 128C3730 59 3793 -6 3895 -6C3932 -6 3994 1 4041 32C4063 1 4111 0 4149 0C4177 0 4199 0 4199 31C4199 61 4174 61 4159 61C4117 61 4107 66 4099 69L4099 285C4099 356 4045 440 3901 440C3858 440 3756 440 3756 367C3756 337 3777 321 3801 321C3816 321 3844 330 3845 367C3845 375 3846 376 3866 378C3880 379 3893 379 3902 379C3978 379 4030 348 4030 277C3853 274 3730 224 3730 128ZM3799 128C3799 177 3885 214 4030 218L4030 134C4030 111 4030 90 3991 72C3955 55 3910 55 3902 55C3840 55 3799 89 3799 128ZM4258 30C4258 0 4284 0 4298 0L4627 0C4642 0 4667 0 4667 30C4667 61 4643 61 4627 61L4497 61L4497 570C4497 601 4491 611 4457 611L4299 611C4283 611 4258 611 4258 580C4258 550 4284 550 4298 550L4428 550L4428 61L4299 61C4283 61 4258 61 4258 30ZM5274 400C5274 370 5299 370 5314 370L5344 370L5459 30C5471 -4 5491 -4 5512 -4C5531 -4 5554 -4 5565 29L5680 370L5710 370C5725 370 5750 370 5750 400C5750 431 5726 431 5710 431L5593 431C5578 431 5553 431 5553 401C5553 370 5577 370 5593 370L5621 370L5512 48L5403 370L5431 370C5446 370 5471 370 5471 400C5471 431 5447 431 5431 431L5314 431C5298 431 5274 431 5274 400ZM5830 128C5830 59 5893 -6 5995 -6C6032 -6 6094 1 6141 32C6163 1 6211 0 6249 0C6277 0 6299 0 6299 31C6299 61 6274 61 6259 61C6217 61 6207 66 6199 69L6199 285C6199 356 6145 440 6001 440C5958 440 5856 440 5856 367C5856 337 5877 321 5901 321C5916 321 5944 330 5945 367C5945 375 5946 376 5966 378C5980 379 5993 379 6002 379C6078 379 6130 348 6130 277C5953 274 5830 224 5830 128ZM5899 128C5899 177 5985 214 6130 218L6130 134C6130 111 6130 90 6091 72C6055 55 6010 55 6002 55C5940 55 5899 89 5899 128ZM6332 31C6332 0 6356 0 6372 0L6633 0C6648 0 6674 0 6674 30C6674 61 6648 61 6633 61L6522 61L6522 186C6522 280 6581 376 6702 376C6703 352 6720 332 6745 332C6767 332 6787 348 6787 375C6787 395 6775 437 6692 437C6641 437 6577 419 6522 356L6522 390C6522 421 6516 431 6482 431L6372 431C6357 431 6332 431 6332 401C6332 370 6356 370 6372 370L6453 370L6453 61L6372 61C6357 61 6332 61 6332 31ZM7034 562C7034 534 7056 512 7084 512C7112 512 7134 534 7134 562C7134 590 7112 612 7084 612C7056 612 7034 590 7034 562ZM6903 30C6903 0 6929 0 6944 0L7239 0C7254 0 7280 0 7280 30C7280 61 7254 61 7239 61L7134 61L7134 390C7134 421 7128 431 7094 431L6952 431C6937 431 6911 431 6911 401C6911 370 6937 370 6952 370L7065 370L7065 61L6944 61C6928 61 6903 61 6903 30ZM7405 128C7405 59 7468 -6 7570 -6C7607 -6 7669 1 7716 32C7738 1 7786 0 7824 0C7852 0 7874 0 7874 31C7874 61 7849 61 7834 61C7792 61 7782 66 7774 69L7774 285C7774 356 7720 440 7576 440C7533 440 7431 440 7431 367C7431 337 7452 321 7476 321C7491 321 7519 330 7520 367C7520 375 7521 376 7541 378C7555 379 7568 379 7577 379C7653 379 7705 348 7705 277C7528 274 7405 224 7405 128ZM7474 128C7474 177 7560 214 7705 218L7705 134C7705 111 7705 90 7666 72C7630 55 7585 55 7577 55C7515 55 7474 89 7474 128ZM7887 580C7887 550 7913 550 7927 550L7972 550L7972 41C7972 21 7972 0 8007 0C8041 0 8041 20 8041 45C8082 3 8125 -6 8157 -6C8266 -6 8363 89 8363 216C8363 339 8274 437 8168 437C8120 437 8075 419 8041 388L8041 570C8041 601 8035 611 8001 611L7928 611C7912 611 7887 611 7887 580ZM8041 191L8041 264C8041 323 8099 376 8162 376C8236 376 8294 303 8294 216C8294 120 8224 55 8154 55C8076 55 8041 143 8041 191ZM8458 30C8458 0 8484 0 8498 0L8827 0C8842 0 8867 0 8867 30C8867 61 8843 61 8827 61L8697 61L8697 570C8697 601 8691 611 8657 611L8499 611C8483 611 8458 611 8458 580C8458 550 8484 550 8498 550L8628 550L8628 61L8499 61C8483 61 8458 61 8458 30ZM8980 217C8980 95 9081 -6 9210 -6C9342 -6 9389 84 9389 109C9389 137 9360 137 9354 137C9336 137 9328 134 9321 115C9299 64 9245 55 9217 55C9142 55 9067 105 9051 191L9349 191C9370 191 9389 191 9389 228C9389 342 9325 440 9195 440C9076 440 8980 340 8980 217ZM9052 251C9066 324 9125 379 9195 379C9247 379 9309 354 9318 251ZM9579 575C9579 568 9588 435 9592 365C9593 356 9593 328 9624 328C9655 328 9655 355 9656 368C9660 437 9668 568 9668 575C9668 607 9644 621 9624 621C9603 621 9579 606 9579 575ZM9755 579C9755 568 9761 483 9768 365C9768 361 9767 328 9799 328C9830 328 9830 353 9831 368C9835 437 9844 568 9844 575C9844 612 9814 621 9800 621C9775 621 9755 601 9755 579Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g><g><g><g transform=\"matrix(1,0,0,1,29,133.0859375)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M3194 306C3194 127 3316 -6 3456 -6C3546 -6 3630 51 3630 80C3630 108 3602 108 3592 108C3575 108 3572 108 3562 98C3527 66 3489 55 3455 55C3347 55 3250 163 3250 305C3250 454 3351 556 3454 556C3482 556 3527 546 3550 485C3547 487 3519 505 3486 505C3406 505 3341 419 3341 306C3341 187 3411 106 3485 106C3534 106 3630 148 3630 321C3630 386 3630 617 3454 617C3318 617 3194 486 3194 306ZM3397 305C3397 389 3443 444 3485 444C3530 444 3574 386 3574 305C3574 224 3529 167 3486 167C3439 167 3397 227 3397 305ZM3747 35C3747 19 3747 -6 3777 -6C3786 -6 3802 -5 3814 32C3863 -4 3916 -6 3944 -6C4102 -6 4134 77 4134 125C4134 229 4005 250 3973 255C3950 259 3930 262 3905 267C3876 271 3808 283 3808 322C3808 348 3840 379 3935 379C4018 379 4032 349 4035 323C4036 306 4038 289 4069 289C4104 289 4104 310 4104 330L4104 399C4104 415 4104 440 4074 440C4050 440 4046 426 4044 419C4000 440 3956 440 3937 440C3770 440 3747 358 3747 322C3747 230 3852 213 3944 199C3993 191 4073 178 4073 125C4073 88 4036 55 3945 55C3898 55 3842 66 3817 144C3812 162 3808 173 3782 173C3747 173 3747 152 3747 132ZM4212 30C4212 0 4238 0 4252 0L4411 0C4425 0 4451 0 4451 30C4451 61 4426 61 4410 61L4366 61L4366 238C4366 338 4440 376 4491 376C4544 376 4558 348 4558 288L4558 61L4519 61C4503 61 4478 61 4478 30C4478 0 4505 0 4519 0L4672 0C4686 0 4712 0 4712 30C4712 61 4687 61 4671 61L4627 61L4627 293C4627 394 4576 437 4497 437C4430 437 4385 403 4366 384L4366 570C4366 601 4360 611 4326 611L4253 611C4237 611 4212 611 4212 580C4212 550 4238 550 4252 550L4297 550L4297 61L4253 61C4237 61 4212 61 4212 30ZM4782 216C4782 89 4877 -6 4987 -6C5097 -6 5192 90 5192 216C5192 341 5099 440 4987 440C4875 440 4782 341 4782 216ZM4851 223C4851 314 4916 379 4987 379C5059 379 5123 314 5123 223C5123 130 5061 55 4987 55C4913 55 4851 130 4851 223ZM5266 401C5266 370 5287 370 5317 370L5377 34C5381 11 5384 -4 5424 -4C5464 -4 5467 5 5485 66C5510 154 5511 168 5514 190L5515 190C5520 138 5557 21 5561 13C5573 -4 5591 -4 5603 -4C5640 -4 5643 12 5647 34L5707 370C5737 370 5758 370 5758 401C5758 431 5734 431 5716 431L5601 431C5583 431 5559 431 5559 401C5559 370 5582 370 5601 370L5650 370L5600 72L5599 72C5595 98 5582 144 5570 185C5552 248 5549 259 5514 259C5504 259 5485 259 5474 237C5471 230 5431 92 5427 72L5426 72L5374 370L5423 370C5441 370 5465 370 5465 400C5465 431 5442 431 5423 431L5308 431C5290 431 5266 431 5266 401Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,123.5,133.0859375)\"><path transform=\"matrix(0.018,0,0,-0.018,0,0)\" d=\"M35 38C35 3 57 0 72 0L362 0C378 0 402 2 402 37C402 75 376 75 365 75L260 75L260 369L376 369C396 369 416 374 416 405C416 443 392 444 376 444L260 444L260 478C260 494 257 540 337 540C344 540 349 540 358 539C369 518 386 514 396 514C417 514 437 532 437 557C437 580 421 615 353 615C274 615 177 587 177 477L177 444L81 444C47 444 43 424 43 404C43 386 51 369 81 369L177 369L177 75L73 75C57 75 35 73 35 38ZM577 222C577 84 662 -4 786 -4C911 -4 997 82 997 222C997 363 910 450 787 450C664 450 577 366 577 222ZM661 231C661 336 728 375 787 375C861 375 913 320 913 230C913 128 858 71 787 71C735 71 661 108 661 231ZM1102 222C1102 84 1187 -4 1311 -4C1436 -4 1522 82 1522 222C1522 363 1435 450 1312 450C1189 450 1102 366 1102 222ZM1186 231C1186 336 1253 375 1312 375C1386 375 1438 320 1438 230C1438 128 1383 71 1312 71C1260 71 1186 108 1186 231Z\" stroke=\"rgb(126,211,33)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(126,211,33)\" fill-opacity=\"1\"></path></g></g></g><g><g><g transform=\"matrix(1,0,0,1,29,155.28125)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M1105 217C1105 95 1206 -6 1335 -6C1467 -6 1514 84 1514 109C1514 137 1485 137 1479 137C1461 137 1453 134 1446 115C1424 64 1370 55 1342 55C1267 55 1192 105 1176 191L1474 191C1495 191 1514 191 1514 228C1514 342 1450 440 1320 440C1201 440 1105 340 1105 217ZM1177 251C1191 324 1250 379 1320 379C1372 379 1434 354 1443 251ZM1587 30C1587 0 1613 0 1627 0L1786 0C1800 0 1826 0 1826 30C1826 61 1801 61 1785 61L1741 61L1741 238C1741 338 1815 376 1866 376C1919 376 1933 348 1933 288L1933 61L1894 61C1878 61 1853 61 1853 30C1853 0 1880 0 1894 0L2047 0C2061 0 2087 0 2087 30C2087 61 2062 61 2046 61L2002 61L2002 293C2002 394 1951 437 1872 437C1805 437 1760 403 1741 384C1741 416 1741 431 1701 431L1628 431C1612 431 1587 431 1587 400C1587 370 1613 370 1627 370L1672 370L1672 61L1628 61C1612 61 1587 61 1587 30ZM2136 215C2136 91 2226 -6 2332 -6C2388 -6 2430 21 2458 50C2458 14 2458 0 2498 0L2571 0C2587 0 2612 0 2612 31C2612 61 2586 61 2572 61L2527 61L2527 570C2527 601 2521 611 2487 611L2414 611C2398 611 2373 611 2373 580C2373 550 2399 550 2413 550L2458 550L2458 392C2425 421 2384 437 2341 437C2232 437 2136 342 2136 215ZM2205 215C2205 311 2275 376 2345 376C2409 376 2458 320 2458 265L2458 194C2458 138 2413 55 2336 55C2265 55 2205 126 2205 215Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g><g><g><g transform=\"matrix(1,0,0,1,29,180.28125)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"M44 306C44 127 166 -6 306 -6C396 -6 480 51 480 80C480 108 452 108 442 108C425 108 422 108 412 98C377 66 339 55 305 55C197 55 100 163 100 305C100 454 201 556 304 556C332 556 377 546 400 485C397 487 369 505 336 505C256 505 191 419 191 306C191 187 261 106 335 106C384 106 480 148 480 321C480 386 480 617 304 617C168 617 44 486 44 306ZM247 305C247 389 293 444 335 444C380 444 424 386 424 305C424 224 379 167 336 167C289 167 247 227 247 305ZM597 35C597 19 597 -6 627 -6C636 -6 652 -5 664 32C713 -4 766 -6 794 -6C952 -6 984 77 984 125C984 229 855 250 823 255C800 259 780 262 755 267C726 271 658 283 658 322C658 348 690 379 785 379C868 379 882 349 885 323C886 306 888 289 919 289C954 289 954 310 954 330L954 399C954 415 954 440 924 440C900 440 896 426 894 419C850 440 806 440 787 440C620 440 597 358 597 322C597 230 702 213 794 199C843 191 923 178 923 125C923 88 886 55 795 55C748 55 692 66 667 144C662 162 658 173 632 173C597 173 597 152 597 132ZM1062 30C1062 0 1088 0 1102 0L1261 0C1275 0 1301 0 1301 30C1301 61 1276 61 1260 61L1216 61L1216 238C1216 338 1290 376 1341 376C1394 376 1408 348 1408 288L1408 61L1369 61C1353 61 1328 61 1328 30C1328 0 1355 0 1369 0L1522 0C1536 0 1562 0 1562 30C1562 61 1537 61 1521 61L1477 61L1477 293C1477 394 1426 437 1347 437C1280 437 1235 403 1216 384L1216 570C1216 601 1210 611 1176 611L1103 611C1087 611 1062 611 1062 580C1062 550 1088 550 1102 550L1147 550L1147 61L1103 61C1087 61 1062 61 1062 30ZM1632 216C1632 89 1727 -6 1837 -6C1947 -6 2042 90 2042 216C2042 341 1949 440 1837 440C1725 440 1632 341 1632 216ZM1701 223C1701 314 1766 379 1837 379C1909 379 1973 314 1973 223C1973 130 1911 55 1837 55C1763 55 1701 130 1701 223ZM2116 401C2116 370 2137 370 2167 370L2227 34C2231 11 2234 -4 2274 -4C2314 -4 2317 5 2335 66C2360 154 2361 168 2364 190L2365 190C2370 138 2407 21 2411 13C2423 -4 2441 -4 2453 -4C2490 -4 2493 12 2497 34L2557 370C2587 370 2608 370 2608 401C2608 431 2584 431 2566 431L2451 431C2433 431 2409 431 2409 401C2409 370 2432 370 2451 370L2500 370L2450 72L2449 72C2445 98 2432 144 2420 185C2402 248 2399 259 2364 259C2354 259 2335 259 2324 237C2321 230 2281 92 2277 72L2276 72L2224 370L2273 370C2291 370 2315 370 2315 400C2315 431 2292 431 2273 431L2158 431C2140 431 2116 431 2116 401Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,76.25,180.28125)\"><path transform=\"matrix(0.018,0,0,-0.018,0,0)\" d=\"M35 38C35 3 57 0 72 0L362 0C378 0 402 2 402 37C402 75 376 75 365 75L260 75L260 369L376 369C396 369 416 374 416 405C416 443 392 444 376 444L260 444L260 478C260 494 257 540 337 540C344 540 349 540 358 539C369 518 386 514 396 514C417 514 437 532 437 557C437 580 421 615 353 615C274 615 177 587 177 477L177 444L81 444C47 444 43 424 43 404C43 386 51 369 81 369L177 369L177 75L73 75C57 75 35 73 35 38ZM577 222C577 84 662 -4 786 -4C911 -4 997 82 997 222C997 363 910 450 787 450C664 450 577 366 577 222ZM661 231C661 336 728 375 787 375C861 375 913 320 913 230C913 128 858 71 787 71C735 71 661 108 661 231ZM1102 222C1102 84 1187 -4 1311 -4C1436 -4 1522 82 1522 222C1522 363 1435 450 1312 450C1189 450 1102 366 1102 222ZM1186 231C1186 336 1253 375 1312 375C1386 375 1438 320 1438 230C1438 128 1383 71 1312 71C1260 71 1186 108 1186 231Z\" stroke=\"rgb(74,144,226)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(74,144,226)\" fill-opacity=\"1\"></path></g></g><g><g transform=\"matrix(1,0,0,1,104.6015625,180.28125)\"><path transform=\"matrix(0.015,0,0,-0.015,0,0)\" d=\"\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g><g></g></g><g><g><g><text x=\"323\" y=\"97\" style=\"white-space:pre;stroke:none;fill:rgb(0,0,0);fill-opacity:1;font-size:15px;font-family:Arial, Helvetica, sans-serif;font-weight:400;font-style:normal;dominant-baseline:text-before-edge;text-decoration:none solid rgb(0, 0, 0);\">ローカルスコープ</text></g></g></g></svg>\n</svg>","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"warning: Warning\n上の例のように，グローバル変数と同じ名前のローカル変数を宣言すると非常にわかりにくいコードになるので要注意．レポートでは特別な理由がない限り，グローバル変数と同じ名前のローカル変数は使わないようにしてください．また，let ... end を使わなければならないようなコード設計は避けてください．","category":"page"},{"location":"11_変数.html#変数の名前","page":"変数: Variables","title":"変数の名前","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"原則として，変数名は他の人がコードを読んだときにわかりやすい名前をつけるようにする．  ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"変数の用途を的確に表す単語やフレーズにすることが望ましい．     変数名は通常は英語で書くが，ローマ字でもわかりやすければ全然問題ない．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"例えば，幅と高さから長方形の面積を計算値をある変数に格納する場合は，","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"   area = width*height","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"よりも","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"   area_rectangle = width*height","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"と書いたほうがより明確になる． 右辺の計算式から変数の意味や用途を推測できるような場合でも，このように はっきり書いてあったほうが読み手にとっては負担が少なくなる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"冗長すぎる変数名は逆にわかりにくくしてしまうので注意が必要である．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"    two_dimensional_lebesgue_measure_rectangle = width*height  ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"もし，一時的にしか使わないのならば，短い変数名にしてコメントで説明を書いておく というのも有効である．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"   S = width*height    # 長方形の面積","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"このように変数名は短すぎると意味がわかりにくくなり，長すぎると冗長で読みにくくなる． 適切な変数名をつけることは案外難しいが，以下のようなことに気をつけるだけでも 十分にわかりやすくなる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"変数名は名詞とする．\nできるだけ明確な単語を選択する: size → length, area, volume, など．\nスコープが小さければ短く，スコープが大きければ詳しく．\nループカウンタ（後述）は短い変数名にする． i,j,kなどを使う慣習がある．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"参考文献：「リーダブルコード」(O'Reilly)","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"danger: レポート作成上の注意\nJuliaでは日本語のようなマルチバイト文字も変数名として使用可能ですが，  以下の理由から，できるだけアルファベット表記してください．他言語ではマルチバイト文字が使用可能とは限らない．\nコメントとして日本語表記を想定しているので，変数名と混じると紛らわしい．\n入力に手間がかかる割に，特にメリットがない．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"note: Note\nJuliaにおける命名規則については，スタイルガイドを参照．","category":"page"},{"location":"11_変数.html#変数の型:-[Types](https://docs.julialang.org/en/v1/manual/types/)","page":"変数: Variables","title":"変数の型: Types","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"各変数には型 (type) が定められている．型はどのようなデータを格納しているか表すラベルのようなものである．  ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"662\" height=\"113\" style=\"\n        width:662px;\n        height:113px;\n        background: #FFF;\n        fill: none;\n\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\"/>\n        \n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"role-diagram-draw-area\"><g class=\"shapes-region\" style=\"stroke: black; fill: none;\"><g class=\"composite-shape\"><path class=\"real\" d=\" M203,27 L330.5,27 L330.5,67 L203,67 Z\" style=\"stroke-width: 1; stroke: rgb(0, 0, 0); fill: none; fill-opacity: 1;\"/></g><g class=\"composite-shape\"><path class=\"real\" d=\" M144.5,37.5 L165.2,37.5 L165.2,30 L179,45 L165.2,60 L165.2,52.5 L144.5,52.5 Z\" style=\"stroke-width: 1; stroke: rgb(0, 0, 0); fill: none; fill-opacity: 1;\"/></g><g/></g><g/><g/><g/></svg>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"660\" height=\"111\" style=\"width:660px;height:111px;font-family:Asana-Math, Asana;background:#FFF;\"><g><g><g><text x=\"233\" y=\"77\" style=\"white-space:pre;stroke:none;fill:rgb(0,0,0);fill-opacity:1;font-size:15px;font-family:Arial, Helvetica, sans-serif;font-weight:400;font-style:normal;dominant-baseline:text-before-edge;text-decoration:none solid rgb(0, 0, 0);\">変数名：x</text></g></g></g><g><g><g><text x=\"344\" y=\"38\" style=\"white-space:pre;stroke:none;fill:rgb(0,0,0);fill-opacity:1;font-size:15px;font-family:Arial, Helvetica, sans-serif;font-weight:400;font-style:normal;dominant-baseline:text-before-edge;text-decoration:none solid rgb(0, 0, 0);\">型：整数</text></g></g><g></g></g><g><g><g><g transform=\"matrix(1,0,0,1,248,53.6)\"><path transform=\"matrix(0.0216,0,0,-0.0216,0,0)\" d=\"M105 469C105 444 123 439 138 439C157 439 198 445 242 483L242 61L151 61C135 61 111 61 111 30C111 0 136 0 151 0L402 0C417 0 442 0 442 30C442 61 418 61 402 61L311 61L311 581C311 597 311 622 281 622C262 622 256 610 251 598C213 513 161 502 142 500C126 499 105 497 105 469ZM577 31C577 0 602 0 618 0L957 0C990 0 997 9 997 41L997 67C997 86 997 108 963 108C928 108 928 89 928 61L690 61C749 112 845 187 888 227C951 283 997 347 997 427C997 547 896 622 774 622C656 622 577 540 577 455C577 418 605 407 622 407C643 407 666 424 666 452C666 464 661 477 652 484C667 530 714 561 769 561C851 561 928 515 928 427C928 357 879 299 813 244L592 58C583 50 577 45 577 31ZM1094 136C1094 47 1191 -11 1314 -11C1445 -11 1530 81 1530 174C1530 245 1483 304 1417 334C1473 370 1501 427 1501 481C1501 555 1428 622 1313 622C1193 622 1123 574 1123 505C1123 472 1148 458 1168 458C1189 458 1212 475 1212 503C1212 517 1206 527 1203 530C1234 561 1305 561 1314 561C1382 561 1432 525 1432 480C1432 450 1417 415 1390 393C1358 367 1333 365 1297 363C1240 359 1225 359 1225 330C1225 299 1249 299 1265 299L1311 299C1410 299 1461 232 1461 174C1461 113 1405 50 1314 50C1274 50 1197 61 1171 108C1176 113 1183 119 1183 139C1183 163 1164 183 1139 183C1116 183 1094 168 1094 136Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></g></g></g><g><g><g><text x=\"51\" y=\"33\" style=\"white-space:pre;stroke:none;fill:rgb(0,0,0);fill-opacity:1;font-size:21.6px;font-family:Arial, Helvetica, sans-serif;font-weight:400;font-style:normal;dominant-baseline:text-before-edge;text-decoration:none solid rgb(0, 0, 0);\">x = 123</text></g></g></g></svg>\n</svg>\n","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = 123","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"初出の変数名に値を代入すると，代入した値の型が自動的に設定される． 変数の型はtypeof()で確認できる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"typeof(x)","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"整数値は自動的にInt64という整数型になる．型の種類についてはすぐ後で説明する．","category":"page"},{"location":"11_変数.html#整数型:-[Integers](https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Integers)","page":"変数: Variables","title":"整数型: Integers","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"Int64型は64bit長の符号付き整数 (integer)を表す．整数型にはInt8, Int16, Int32, Int64, Int128がある． 値として1や-200と記述した場合，暗黙的にInt64と解釈される．型を明示して代入することもできる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"x = Int128(1)\ntypeof(x)","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"単にIntとタイプするとシステム環境のbit数に依存して解釈される．[Int64]","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"[Int64]: Document/Integers． ","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"typeof(Int(1))\nSys.WORD_SIZE   # システム環境のbit数の確認","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"整数型はビット数に応じて扱える整数の範囲に限界がある（参考）． typemax(), typemin()で扱える整数の最大値と最小値が具体的に知ることができる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"typemax(Int64)\ntypemin(Int64)\ntypemax(UInt64)\ntypemin(UInt64)","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"限界の最大値に正の値を足そうとすると，overflowを起こして正常な結果が得られない．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"typemax(Int64) + 1\ntypemax(UInt64) + 1","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"演算の際にoverflowを検知するためには，Base.Checked.checked_addなどが使える．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"Base.Checked.checked_add(100, 1)  # 100 + 1 = 101 で範囲内で問題なし．\nM = typemax(Int64)\nm = typemin(Int64)\nBase.Checked.checked_add(M, 1)   # M+1 → overflowエラーが発生する\nBase.Checked.checked_mul(M, 2)   # M*2 → overflowエラーが発生する\nBase.Checked.checked_sub(typemin(Int64), 1)   # m-1 → underflowエラーが発生する","category":"page"},{"location":"11_変数.html#浮動小数点数:-[Floating-Point-Numbers](https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/#Floating-Point-Numbers)","page":"変数: Variables","title":"浮動小数点数: Floating-Point Numbers","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"プログラミング言語では小数は浮動小数点数という形式で扱われる．","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"@show x = 2/3\ntypeof(x)","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"浮動小数点数については後で説明する．","category":"page"},{"location":"11_変数.html#複素数","page":"変数: Variables","title":"複素数","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"@show z = Complex(1,2)\n@show z^2","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"数学関数 Julia\n実部 mathrmRe z real(z)\n虚部 mathrmIm z imag(z)\nz の絶対値 abs(z)\narg z in (-pi pi angle(z)","category":"page"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"z = 1.0+sqrt(3)*im    # `im`は虚数単位\nreal(z)\nimag(z)\nabs(z)\nangle(z)/pi\nangle(0)/pi\nangle(-1)/pi\nangle(1im)/pi\nangle(-1im)/pi","category":"page"},{"location":"11_変数.html#有理数:-Rational","page":"変数: Variables","title":"有理数: Rational","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"Juliaには有理数型が用意されている． 講義では扱わないので，詳細については公式ドキュメント(Rational Numbers)を参照．","category":"page"},{"location":"11_変数.html#任意精度計算","page":"変数: Variables","title":"任意精度計算","text":"","category":"section"},{"location":"11_変数.html","page":"変数: Variables","title":"変数: Variables","text":"Int64やFloat64は扱える桁数は固定されていて，変更はできない． 桁数を変更したい場合は任意精度演算ライブラリが必要となる． Juliaでは，BigInt型やBigFloat型として変数を宣言すれば 自動的に任意精度演算が適用される． この講義では任意精度演算は扱わない． 詳細については公式ドキュメント(Arbitrary Precision Arithmetic)を参照．","category":"page"},{"location":"17_配列.html#配列:-[Array](https://docs.julialang.org/en/v1/manual/arrays/)","page":"配列: Array","title":"配列: Array","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"次のように複数の変数を1列に並べて， [...] で囲ったものを配列という．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1, \"two\" , 3, \"z\"]\nlength(A)   # 配列の要素数を取得","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列の左からi番目の要素にアクセスするには，A[i]と書く．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"begin\nA = [1, \"two\" , 3, \"z\"]\nprintln(A[1])\nprintln(A[2])\nprintln(A[3])\nprintln(A[4])\nend","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列の先頭と末尾の要素はそれぞれ A[begin], A[end]と書いてアクセスできる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1, \"two\" , 3, \"z\"];\nA[begin]\nA[end]\nA[end-1] ","category":"page"},{"location":"17_配列.html#コロンによる配列の抜き出し","page":"配列: Array","title":"コロンによる配列の抜き出し","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"例として整数の連番からなる配列を考える．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = collect(1:10)     # A = [1,2, ..., 10]","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"1:10は1,2,...,10 という範囲を表す． collect()で範囲が配列に変換されたということである．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"次のように書いても同じである．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = Vector(1:10)","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列の一部分にまとめてアクセスしたい場合は，A[範囲]の形で書く．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = collect(1:10)\nA[3:6]      \nA[1:3:end]    # 1 から end まで 3刻みの範囲","category":"page"},{"location":"17_配列.html#配列同士の連結","page":"配列: Array","title":"配列同士の連結","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"２つの配列A, B を連結させる場合は，[A; B] あるいは vcat(A,b)とすればよい．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3]\nB = [\"a\", \"b\", \"c\"]\n[A; B]\nvcat(A, B)","category":"page"},{"location":"17_配列.html#要素の-push-と-pop","page":"配列: Array","title":"要素の push と pop","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列の末尾に要素を追加するには push!(配列, 追加する要素)を用いる． 関数名に!がついているのは，引数を変更する関数であることを表している．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3,\"z\"];\npush!(A,4)\npush!(A,\"a\",\"b\",\"c\",[\"あ\", \"い\", \"う\"])","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列の末尾から要素を取り出すには pop!を用いる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3,\"z\"];\npop!(A)\nA  # 取り出したものは無くなっているはず","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"一部分を取り出したい場合はsplice!が使える．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3,4,5]\nsplice!(A,2:4)   # A[2:4]を取り出す\nA   # 確認のため表示．取り出した部分は残っていない","category":"page"},{"location":"17_配列.html#配列の参照とコピー：deepcopy","page":"配列: Array","title":"配列の参照とコピー：deepcopy","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"Julia言語では，配列のコピーは 参照コピーである． つまり，配列の要素が記録されているメモリアドレスのコピーになる． 次の例を見れば参照がどういうものかわかると思う．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"a = [1,2]\nb = a     # 参照のコピー\na[1] = 100   \n@show a, b;  # aを変えるとbも変わる\nb[2] = 200 \n@show a, b;  # bを変えるとaも変わる","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列を複製してコピーするには deepcopy()を用いる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"a = [1,2]\nb = deepcopy(a)     # 配列そのものを複製\na[1] = 100   # bは書き換わらない \n@show a, b;  \nb[2] = 200 　# aは書き換わらない\n@show a, b;  ","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"deepcopy()は配列がそのまま複製されるので，コピーするのに時間もかかるし，新たにメモリも確保されるので注意．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"a = [1,2]\n@time b = a    # アロケーション（割当）は行われない\n@time b = deepcopy(a)   # アロケーションされる ","category":"page"},{"location":"17_配列.html#浅いコピーと深いコピー","page":"配列: Array","title":"浅いコピーと深いコピー","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"deepcopy()は配列に格納された値をすべてそのままコピーして新しい配列を生成する． これは通常，深いコピー (deepcopy) と呼ばれる． これに対して，浅いコピー(shallow) は各要素の参照をコピーする． 違いは次の例を見ればわかる． まずは 深いコピーの挙動を見る．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"a = [1,2,[3,4]]\nb = deepcopy(a)\na[1] = 100    # 1 を 100に\na[3][1] = 300   # [3,4] を [300, 4] に\n@show a, b;   # bは何も変わっていない","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"次に浅いコピーの場合：","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"a = [1,2,[3,4]]\nb = copy(a)     # 浅いコピー\na[1] = 100    # 1 → 100に\na[3][1] = 300   # [3,4] → [300, 4] に\n@show a, b;   # b[1]は変わっていないが，b[3]は変わっている","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"深いコピーdeepcopy(a)の場合，a に配列が含まれている場合，その配列の中身も丸ごとコピーされて， b = [値, 値, [値, 値]] となる．それに対して， 浅いコピーcopy(a) の場合，a内の配列は参照がコピーされる：b = [値，値，参照] ． この結果，b[3]は a[3] = [3,4] への参照となる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"note: Note\nJulia言語やC/C++, Pythonでは，配列=配列は参照コピーになる． 一方で，FortranやMATLABでは値コピーになるので，注意が必要である． 値コピーの方がコードの挙動がわかりやすいが， 無頓着に書きならべると無駄なアロケーションを発生させてしまう可能性がある． 例えば，与えられた配列aに対して，    b = a        # 参照コピー\n    c = a        # 参照コピー\n    x = b + c    # 配列生成（アロケーション1回目）というコードを考えてみよう．Julia言語の場合は上のコメントに書いてあるとおり， 上2行は参照コピーで，3行目で新たに配列が生成されるので，アロケーションは1回だけである． もし，仮に=が値コピーを行う場合は，上記コードは次と等価になる．    b = copy(a)      # 値コピー（アロケーション1回目）\n    c = copy(a)      # 値コピー（アロケーション2回目）\n    x = b + c        # 配列生成（アロケーション3回目）この場合，アロケーションは3回発生する． （しかし，そもそも x = a + aと書けば無駄なアロケーションは発生しないので， 上の例はあまり意味が無い．もっと良い例はないか？）","category":"page"},{"location":"17_配列.html#配列に対する関数","page":"配列: Array","title":"配列に対する関数","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3,4,5]\nsum(A)      # 配列の要素の総和\nprod(A)     # 総乗\nmaximum(A)  # 最大値\nminimum(A)  # 最小値","category":"page"},{"location":"17_配列.html#dot-演算子：要素ごとの操作","page":"配列: Array","title":"dot 演算子：要素ごとの操作","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列Aの要素ごとに演算，あるいは関数を作用させたい場合， dot演算子 . を用いる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3,4,5]\nA .+ 1     # [1+1, 2+1, 3+1, 4+1, 5+1]\nA .^ 2     # [1^2, 2^2, 3^2, 4^2, 5^2]\nsqrt.(A)   # [sqrt(1), sqrt(2), sqrt(3),sqrt(4),sqrt(5)]","category":"page"},{"location":"17_配列.html#空の配列","page":"配列: Array","title":"空の配列","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"empty_array = []   # 空の配列．任意の型の変数を\nvec = Float64[]    # 要素の型を指定する","category":"page"},{"location":"17_配列.html#配列の生成","page":"配列: Array","title":"配列の生成","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"zeros(3)         # `0`が3個の配列\nones(3)          # `1`が3個の配列\nfill(\"abc\", 3)  # \"abc\"が3個の配列","category":"page"},{"location":"17_配列.html#配列とループ処理","page":"配列: Array","title":"配列とループ処理","text":"","category":"section"},{"location":"17_配列.html#配列によるforループ","page":"配列: Array","title":"配列によるforループ","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"Aを配列とする．for ループに範囲においてx in Aと書くと， xが配列Aの先頭から末尾へと動くようなループが書ける．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,[2],\"three\"] \nfor x in A \n    @show x\nend","category":"page"},{"location":"17_配列.html#要素番号の取得:-enumerate","page":"配列: Array","title":"要素番号の取得: enumerate","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"カウンタ変数が配列内を動くとき，要素の中身だけでなく番号も取得したい場合もある． その場合は，enumerate() を使う．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,[2],\"three\"] \nfor (i,x) in enumerate(A) \n    @show i,x\nend","category":"page"},{"location":"17_配列.html#内包表記-(Comprehensions)","page":"配列: Array","title":"内包表記 (Comprehensions)","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,3,4,5]のような連番からなる配列は，次のようにして生成できる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [i^2 for i in 1:5]","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"このように配列内で for ループを用いて配列を定義する方法を内包表記という．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,4,9,16,25]のような i 番目の要素が i^2 であるような配列を， 任意の長さで作成したい場合などは，次のような forループを用いた内包表記が使える．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"n = 10\nA = [i^2 for i in 1:n]","category":"page"},{"location":"17_配列.html#BitVector-による部分配列の抽出","page":"配列: Array","title":"BitVector による部分配列の抽出","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"例として，実数の要素からなる配列 A から，正の値をもつ要素だけを取り出すことを考える． これは次のようにインデックスに条件式を与えることで実現できる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [0, -1, 2, -3, 4, -5];  # a_i = (-1)^i\nA[A .> 0]","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"これの仕組みをもう少し具体的に見てみよう． 配列のインデックスに，0 or 1 の要素のみを含む配列 BitVectorを渡すと，1の要素に対応する部分配列を抽出できる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [0, -1, 2, -3, 4, -5];  # a_i = (-1)^i\nidx = BitVector([0,0,0,1,1,1])   \nA[idx]  ","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A .> 0 はAの要素ごとに 条件式>0を適用し，trueの場合は1を，falseの場合は0を返す． 結果は BitVector型の配列となる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [0, -1, 2, -3, 4, -5];  # a_i = (-1)^i\nidx = A .> 0\nA[idx]       # A[A.>0]と等価","category":"page"},{"location":"17_配列.html#特定の値の除去","page":"配列: Array","title":"特定の値の除去","text":"","category":"section"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"配列から missing（統計データの欠損を表す値）を取り除く処理を考える． 値がmissingかどうかの判定にはismissing()を用いる．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"ismissing(missing)\nismissing(100)","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":".ismissin.(A)で missingを含む要素のBitVectorが得られるので，これを .! で反転させて抽出する．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,missing,4,missing]\nA[.!ismissing.(A)]   ","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":".!ismissing.は (!ismissing).と書くこともできるし， map()を使ったほうが場合によっては見やすい．","category":"page"},{"location":"17_配列.html","page":"配列: Array","title":"配列: Array","text":"A = [1,2,missing,4,missing]\nA[(!ismissing).(A)]   \nA[map(!, ismissing.(A))]   ","category":"page"},{"location":"10_基本機能.html#基本機能","page":"基本機能","title":"基本機能","text":"","category":"section"},{"location":"10_基本機能.html#四則演算","page":"基本機能","title":"四則演算","text":"","category":"section"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"試しに四則演算で計算してみよう．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"1 + 2    # 足し算\n1 - 2    # 引き算\n2 * 3    # 掛け算\n2 / 3    # 割り算\n10^3     # 累乗． Pythonでは 10**3 と記す． ","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"danger: レポート作成上の注意\n最後の演算結果は ans で参照できますが， レポートでは計算結果を ans で参照しないで，きちんと変数に格納ください．","category":"page"},{"location":"10_基本機能.html#コマンド履歴・補完","page":"基本機能","title":"コマンド履歴・補完","text":"","category":"section"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"実行したコマンドは履歴が保存されている．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"上矢印キー or ctrl + p ： 一つ前の入力に戻る（過去方向に１つ戻る）\n下矢印キー or ctrl + n ：現在方向に一つ進む","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"TABキーでコマンドやパス（ファイルやフォルダー）の補完ができる． 複数の候補がある場合は一覧が表示される．","category":"page"},{"location":"10_基本機能.html#コメントアウト","page":"基本機能","title":"コメントアウト","text":"","category":"section"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"シャープ記号 # より右側に書かれたコードは行末まで無視される．  ","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"begin\n  println(\"1行目\")\n  # println(\"2行目：ここは実行されない\")\n  println(\"3行目\")\nend","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"begin ... end で囲んだ部分はコードブロックとなる．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"tip: Tip\n変数の用途やコードの目的やどのように動作するのかなど，コメントアウト機能で適宜説明を書くようにしてください．","category":"page"},{"location":"10_基本機能.html#文字列:-[Strings](https://docs.julialang.org/en/v1/manual/strings/)","page":"基本機能","title":"文字列: Strings","text":"","category":"section"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"文字列を表示する簡単な例として，println()を使って hello, world [HW]と表示してみよう． 文字列は double quotes \" ... \"で囲む必要がある．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"[HW]: Kernighan (1978) によるhello, world","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"println(\"hello, world\")    ","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"println()は自動的に末尾に改行コードが入るが，print()は入らない．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"print(\"hello\")       # print()は改行なし\nprint(\", world\")\nprintln(\"hello, \\nworld\")   # `\\n`は改行コード","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"複数行の文字列は，\"\"\" ... \"\"\" で囲めばよい．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"println(\n\"\"\"                                    \n May I tell a story purposing to render clear the ratio circular \n perimeter-breadth, revealing one of the problems most famous in modern \n days, and the greatest man of science anciently known.\n\"\"\"\n) ","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"文字列の連結は * で行う．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"println(\"hello\" * \", world\")\nprintln(\"Hello! \"^5)\nprintln(\"1\"^19)   # 1のrepunit","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"ちなみに，1を2, 19, 23, 317, 1031個の並べた数は素数である．[repunit]","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"[repunit]: OEIS:A004023","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"note: Note\nPythonなどの他の言語では + で文字列の連結を行います． 公式ドキュメントによると，数学において + は可換な演算子を表すので，Juliaでは 非可換な演算にも用いられる * を文字列の連結に使うようにしたとのこと．","category":"page"},{"location":"10_基本機能.html#[Help-mode](https://docs.julialang.org/en/v1/stdlib/REPL/#Help-mode)","page":"基本機能","title":"Help mode","text":"","category":"section"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"プロンプトで ? キーを押下すると help mode に入る． プロンプトの表示が help?> に変わるので，ここで 調べたいコマンド名を入力すると，説明や使用例が表示される．","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"help?> println\nsearch: println printstyled print sprint isprint\n\n  println([io::IO], xs...)\n\n  Print (using print) xs followed by a newline. If io is not supplied, prints\n  to stdout.\n\n  See also printstyled to add colors etc.\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  julia> println(\"Hello, world\")\n  Hello, world\n  \n  julia> io = IOBuffer();\n  \n  julia> println(io, \"Hello\", ',', \" world.\")\n  \n  julia> String(take!(io))\n  \"Hello, world.\\n\"","category":"page"},{"location":"10_基本機能.html","page":"基本機能","title":"基本機能","text":"表示される内容は公式ドキュメントと同じ内容であるようだ．","category":"page"},{"location":"16_ループ.html#ループ処理","page":"ループ処理","title":"ループ処理","text":"","category":"section"},{"location":"16_ループ.html#for-...-end-ループ","page":"ループ処理","title":"for ... end ループ","text":"","category":"section"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"一連の処理を繰り返し実行したい場合，次のように記述する．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"for i in 1:5\n   @show i\nend","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"i はカウンタ変数と呼ばれ，指定された範囲を動く． i in 1:5 と書けば i = 1, 2 , ..., 5 と1刻みで動く．  i in 1:5 は i = 1:5 とかいても同じであるが，ここでは in で統一する．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"刻み（増分）を k に変更したい場合は，i in 1:k:5　と書く．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"for i in 1:0.5:5    \n    @show i \nend","category":"page"},{"location":"16_ループ.html#多重ループ","page":"ループ処理","title":"多重ループ","text":"","category":"section"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"for ... endループは入れ子にできる．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"for i in 1:3\n    for j in 1:5\n        @show i, j\n    end\nend","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"　","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"Julia言語では多重ループは次のように書くこともできる．他言語ではサポートされていないかもしれない．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"for i in 1:3, j in 1:5\n    @show i, j\nend","category":"page"},{"location":"16_ループ.html#ループからの脱出:-break","page":"ループ処理","title":"ループからの脱出: break","text":"","category":"section"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"breakコマンドでループから抜けることができる．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"s = 0\nfor i in 1:100\n    global s += i\n    @show s\n    if s > 50       # 総和が50を超えたループを抜ける   \n        println(\"break\")\n        break        \n    end\nend","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"ループを抜けずにループの先頭に戻りたい場合は continueコマンドを使う．","category":"page"},{"location":"16_ループ.html","page":"ループ処理","title":"ループ処理","text":"note: Note\nある条件をみたすまでループを際限なく繰り返したい場合は，while ... end が使えます． 数値計算においては，最大反復回数が定められている  for ループを使ったほうが安全です．意図しない無限ループを回避できます． もちろん while ループのほうが適切な場合もありますが，ここではその必要性が無いので for ループのみを用います．","category":"page"},{"location":"12_型の変換.html#型の変換と昇格","page":"型の変換と昇格","title":"型の変換と昇格","text":"","category":"section"},{"location":"12_型の変換.html#型の変換:-convert","page":"型の変換と昇格","title":"型の変換: convert","text":"","category":"section"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"変数の型の変換は convertで行う．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"x = 100\n@show typeof(x)\ny = convert(UInt32, x)   # 符号なし32bit整数へ変換\n@show typeof(y)","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"上記のコードであれば，UInt32(x)でも同じ結果を与える． コーディングスタイルとしてどちらがよいのかはわからない．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"異なる型どうしの変換が定義されていない場合はエラーとなる．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"y = convert(UInt32,-100)   # エラー！","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"もちろん，文字列から整数型への変換も未定義でエラーとなる．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"convert(Int64, \"123\")   # エラー！","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"このような場合は parse関数を用いる．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"parse(Int64, \"123\")","category":"page"},{"location":"12_型の変換.html#型の昇格:-promote","page":"型の変換と昇格","title":"型の昇格: promote","text":"","category":"section"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"promote関数は与えられた複数の変数に対して， 値の情報を損なわないように型を揃えてくれる． これを昇格 (promotion) とよぶ．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"promote(100, 1.5)\ntypeof(ans)","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"型によっては昇格できないこともある．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"promote(100, \"abc\")","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"異なる数値型どうしの演算では自動的にpromoteが呼び出されて適切な型変換が行われるので， 大抵の場合，型の変換を意識する必要はない．","category":"page"},{"location":"12_型の変換.html","page":"型の変換と昇格","title":"型の変換と昇格","text":"x = Int64(100)\ny = Float64(0.1) \ntypeof(x+y)","category":"page"},{"location":"20_Pi.html#無限級数の数値計算","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"","category":"section"},{"location":"20_Pi.html#無限級数","page":"無限級数の数値計算","title":"無限級数","text":"","category":"section"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"実数列a_nの級数","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"  sum_k=1^infty a_n","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"はある実数 S に収束するとする．第 n 項までの部分和を","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"  S_n = sum_k=1^n a_n","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"とおくと，S = lim_n to infty S_n と表されるので， （大きな）正の整数 n に対して S_n は S の近似値になると期待される．","category":"page"},{"location":"20_Pi.html#円周率-pi","page":"無限級数の数値計算","title":"円周率 pi","text":"","category":"section"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"Juliaでは，円周率は数学定数として実装してある．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"pi           # 遅延評価．実際に計算されるときに適切な形で実体化される．\nFloat64(pi)    # `Float64` 型として実体化","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"後者の16桁の値は一致しているので，この節では円周率の正確な値として参照してよい． 念のため，円周率を16桁まで書き出しておく．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":" 3.14159_26535_89793","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"ここでは円周率を無限級数で表し，近似値の計算方法について述べる．","category":"page"},{"location":"20_Pi.html#Leibniz（ライプニッツ）の公式","page":"無限級数の数値計算","title":"Leibniz（ライプニッツ）の公式","text":"","category":"section"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"以下の交代級数に関する公式","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":" 1 - dfrac13 + dfrac15 - dfrac17 + cdots = dfracpi4","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"をLeibnizの公式と呼ぶ．これは収束が遅いので，円周率の近似値計算には適さないが，試しに計算してみよう．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"leibniz(n) = 4*sum((-1)^i/(2i+1) for i in 0:n)\n#function leibniz(n)\n#   s = 0.0\n#   for i in 0:n\n#       s += (-1)^i/(2i+1)\n#   end\n#   return 4s\n#end\nleibniz(120)","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"120+1項まで計算してやっと3桁まで一致する程度であり，やはり収束速度は非常に遅い．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"note: Note\n内包表記とsumにより和を計算する場合は[...]で囲わないほうが効率が良い． 例えば，sum([i for i in 1:10]) はsum(i for i in 1:10)と書いたほうよい． どちらも同じ値を返すが，前者はカッコ内コード [i for i in 1:10] が新たな配列を生成するため，余計なアロケーションを発生させる．","category":"page"},{"location":"20_Pi.html#Machin（マチン）の公式:-[MathWorld](https://mathworld.wolfram.com/MachinsFormula.html)","page":"無限級数の数値計算","title":"Machin（マチン）の公式: MathWorld","text":"","category":"section"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"Machinの公式","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"   4arctan dfrac15 - arctan dfrac1239 = dfracpi4","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"を用いた円周率の近似値計算は収束が速く，より実用的である． arctan x の原点におけるTaylor展開","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":" arctan x = x - dfracx^33 + dfracx^55 - dfracx^77 + cdots","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"は x le 1 で収束する． この級数にx=15 1239を代入すると，次の級数展開を得る．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"pi = 16sum_i=0^infty frac(-1)^i2i+1 5^-(2i+1)\n  - 4sum_i=0^infty frac(-1)^i2i+1 239^-(2i+1)","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"これを適当な項数で打ち切れば円周率の近似を与える．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"note: Note\nMachinの公式で円周率の近似値を計算するプログラムを自分で作成してみよう．  abs(近似値 -  Float64(pi)) < 1e-15が true になれば Float64型に関しては限界近くまで近似できていると判断してください．","category":"page"},{"location":"20_Pi.html#Appendex:-BigFloat型で円周率を表示する","page":"無限級数の数値計算","title":"Appendex: BigFloat型で円周率を表示する","text":"","category":"section"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"任意精度の浮動小数点数を扱うものとして，Juliaでは BigFloat 型が用意してある． BigFloat型で pi を実体化すれば任意の桁数で 円周率を表示できる．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"setprecision(2600)   # 精度を 2600 bits に設定．\nbig(pi)","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"2600 bits は 10進数に換算すると，およそ782桁 (2600 log_10 2 approx 7827) に相当する． 出力を5桁ごとに区切って整形すると次のようになる．","category":"page"},{"location":"20_Pi.html","page":"無限級数の数値計算","title":"無限級数の数値計算","text":"3.\n14159 26535 89793 23846 26433 83279 50288 41971 69399 37510   \n58209 74944 59230 78164 06286 20899 86280 34825 34211 70679\n82148 08651 32823 06647 09384 46095 50582 23172 53594 08128    \n48111 74502 84102 70193 85211 05559 64462 29489 54930 38196 \n44288 10975 66593 34461 28475 64823 37867 83165 27120 19091\n45648 56692 34603 48610 45432 66482 13393 60726 02491 41273\n72458 70066 06315 58817 48815 20920 96282 92540 91715 36436 \n78925 90360 01133 05305 48820 46652 13841 46951 94151 16094 \n33057 27036 57595 91953 09218 61173 81932 61179 31051 18548\n07446 23799 62749 56735 18857 52724 89122 79381 83011 94912\n98336 73362 44065 66430 86021 39494 63952 24737 19070 21798\n60943 70277 05392 17176 29317 67523 84674 81846 76694 05132 \n00056 81271 45263 56082 77857 71342 75778 96091 73637 17872 \n14684 40901 22495 34301 46549 58537 10507 92279 68925 89235\n42019 95611 21290 21960 86403 44181 59813 62977 47713 09960\n51870 72113 49999 99837 29780 49951 056","category":"page"},{"location":"22_LinearAlgebra.html#線形代数に関する数値計算","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"","category":"section"},{"location":"22_LinearAlgebra.html#行列の記述","page":"線形代数に関する数値計算","title":"行列の記述","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"Julia言語では，行列を扱うために Matrix{T} 型が用意されている．Tは行列の成分の型を表す type parameter である． 例えば，Matrix{Int64} は各成分が Int64 型の行列になる． 行列は [...] の内部に成分を記述して定義する．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"成分は行ごとに並べ，セミコロン ; で区切る．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"[1 2 3; 4 5 6]\n\n# あるいは，行ごとに改行する．\n[1 2 3\n 4 5 6]","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"これは成分すべてが Int64型であるため，Matrix{Int64}型になっているが， 次のように明示的に型を指定することもできる．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"Float64[1 2 3; 4 5 6]","category":"page"},{"location":"22_LinearAlgebra.html#ベクトル","page":"線形代数に関する数値計算","title":"ベクトル","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"列ベクトルも同様に ; で区切る． ベクトルの場合はカンマ , で区切ることもできる．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"[1; 2; 3]\n[1, 2, 3]","category":"page"},{"location":"22_LinearAlgebra.html#行列成分へのアクセス","page":"線形代数に関する数値計算","title":"行列成分へのアクセス","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"変数Aに格納した場合，第(ij)成分にアクセスするには， A[i,j]と書けばよい．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"A = [11 12 13; 21 22 23]\nA[2,1]","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"行列を部分的に抜き出したい場合は，例えば，:記号を使う．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"A = [11 12 13; 21 22 23]\nA[:,3] # 第3列\nA[2,:] # 第1列\nA[1:2,1:2] # (1,1)成分から見て2x2の部分のみを抜き出す","category":"page"},{"location":"22_LinearAlgebra.html#逆行列","page":"線形代数に関する数値計算","title":"逆行列","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"正則行列 A の逆行列は inv(A) あるいは A^-1 などで計算できる．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"inv([1 1 1; 1 2 4; 1 3 9])","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"warning: Warning\ninv(A)*bでも連立一次方程式の解を計算することは可能だが，効率が悪いので普通は使わない．   inv(A)は，単位行列で拡大してGaussの消去法で計算する方法（Gauss-Jordan法と呼ぶ）で計算されるが， LU分解による計算 A\\b （＝Gaussの消去法）に比べて計算量の見積もりは約3倍と言われる （伊理・藤野「数値計算の常識」（共立出版）の第5章を参照）．","category":"page"},{"location":"22_LinearAlgebra.html#行列の生成","page":"線形代数に関する数値計算","title":"行列の生成","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"次のようなコマンドでも行列を生成できる．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":" \nzeros(m, n) m times nのゼロ行列\nones(m, n) すべての成分が 1 であるような m times n 行列\nfill(a, m, n) すべての成分が a であるような m times n 行列\nArray{Float64}(undef, m, n) 中身が初期化されていない m times n 行列","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"zeros(3,5)\nones(3,5)\nfill(pi, 3, 5)\nArray{Float64}(undef, 3, 5)","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"note: Note\n型 T に対して，Matrix{T} は Array{T,2} は同じ． 例えば，Matrix{Int64} は Array{Int64, 2} と同じ．","category":"page"},{"location":"22_LinearAlgebra.html#行列のサイズ取得-size","page":"線形代数に関する数値計算","title":"行列のサイズ取得 size","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"size([1 2 3; 4 5 6])     # 2x3の行列","category":"page"},{"location":"22_LinearAlgebra.html#行列演算","page":"線形代数に関する数値計算","title":"行列演算","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"行列 A, Bの和と差はA + B, A - B で計算される． 積も同様に，","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"A = [1 1; 0 0] \nB = [0 0; 1 1]\nA * B     # 行列積の計算例1\nB * A     # 行列積の計算例2\nA .* B    # 演算子の左に dot `.` を付けると成分ごとの計算になる\n[1 2; 3 4].^2   # 成分ごとに2乗する","category":"page"},{"location":"22_LinearAlgebra.html#転置行列","page":"線形代数に関する数値計算","title":"転置行列","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"行列Aの転置行列はtransepose(A)で， 随伴（複素共役転置） adjoint(A) or A'で与えられる． これらは遅延評価であるので，すぐに実体化したい場合はMatrix()などを使えばよい．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"A = [11 12 13; 21im 22im 23im]\ntranspose(A)\nadjoint(A)\nA'  # =adjoint(A)\nMatrix(A') # 実体化","category":"page"},{"location":"22_LinearAlgebra.html#行列の連結","page":"線形代数に関する数値計算","title":"行列の連結","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"複数の行列をブロック行列の要領で並べれば，簡単に連結することができる．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"A = zeros(Int, 2,3)    # 見やすくするために， `Int`型にする\nB = ones(Int, 2,2)\n[A B] # 水平に連結\n[A B\n B A]  # 垂直方向にも連結","category":"page"},{"location":"22_LinearAlgebra.html#内包表記による行列の生成","page":"線形代数に関する数値計算","title":"内包表記による行列の生成","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"二重ループを内包表記することで行列を生成","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"M = [10i+j for i in 1:3, j in 1:5]\nM[1:end, 1:2]   # 1-2列部分を抜き出す","category":"page"},{"location":"22_LinearAlgebra.html#連立一次方程式の数値計算","page":"線形代数に関する数値計算","title":"連立一次方程式の数値計算","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"係数行列 A, ベクトル b に対する 連立一次方程式 Ax=b の数値解は A\\b で計算される．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"\\は left division operator と呼ばれ，A\\bの場合はLU分解で解の計算を行う（詳細については，helpコマンド ? \\ を実行してほしい）． LU分解とは，A = LU となるような下三角行列 L （対角成分はすべて1）と上三角行列 U の積に表すことである． Ax = bは  補助変数 y を導入すると $   Uy = b, \\quad Lx = y  $ という連立方程式と同値になる．数値計算ではこの連立方程式を解いて解を計算するのが一般的な手法となっている． このLU分解による解の計算は，（線形代数の授業で習う）拡大係数行列beginpmatrix A   b endpmatrix をGaussの消去法で解くことと等価である．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"A = Float64[1 1 1; 1 2 4; 1 3 9]\nb = Float64[0, 1, 0]\nx = A\\b","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"warning: Warning\n連立一次方程式の数値計算過程では一般に，浮動小数点数の丸め誤差が発生する． 丸め誤差は微小なものであるが，係数行列によっては，非常に大きな誤差を生むこともあるので注意を要する． そのような連立一次方程式を悪条件であるという．","category":"page"},{"location":"22_LinearAlgebra.html#[LinearAlgebra-パッケージ](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/)の利用","page":"線形代数に関する数値計算","title":"LinearAlgebra パッケージの利用","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"LinearAlgebraパッケージには線形代数に関する計算ライブラリが収められている．  using LinearAlgebraで読み込んで使用する．","category":"page"},{"location":"22_LinearAlgebra.html#トレース，行列式，ランク","page":"線形代数に関する数値計算","title":"トレース，行列式，ランク","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"using LinearAlgebra\nA = [1 2; 3 4]\ntr(A)\ndet(A)\nrank(A)","category":"page"},{"location":"22_LinearAlgebra.html#固有値，固有ベクトル","page":"線形代数に関する数値計算","title":"固有値，固有ベクトル","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"using LinearAlgebra\nA = [1 -1; 1 1]   \neigvals(A)   # 固有値\nv = eigvecs(A)   # 固有ベクトル\nv[:,1]'*A*v[:,1]  # 確認\nv[:,2]'*A*v[:,2] \n","category":"page"},{"location":"22_LinearAlgebra.html#LU分解","page":"線形代数に関する数値計算","title":"LU分解","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"using LinearAlgebra\nA = [2 -1 0 0 0; -1 0 1 0 0; 0 1 0 -1 0; 0 0 -1 0 1; 0 0 0 1 -1]\nL,U = lu(A)\nL,U = lu(A, NoPivot())   # 行交換 (pivoting) なし","category":"page"},{"location":"22_LinearAlgebra.html#対角行列","page":"線形代数に関する数値計算","title":"対角行列","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"using LinearAlgebra\ndiagm([1,2,3])","category":"page"},{"location":"22_LinearAlgebra.html#三重対角行列","page":"線形代数に関する数値計算","title":"三重対角行列","text":"","category":"section"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"using LinearAlgebra\nT = Tridiagonal([1,2,3], [4,5,6,7], [8,7,9])\nMatrix(T)","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"行列Tの第 k 対角成分は diag(T, k) で取得できる．","category":"page"},{"location":"22_LinearAlgebra.html","page":"線形代数に関する数値計算","title":"線形代数に関する数値計算","text":"using LinearAlgebra\nT = Tridiagonal([1,2,3], [4,5,6,7], [8,7,9]);\ndiag(T,-1)  #ひとつ下\ndiag(T,0)  # 対角成分\ndiag(T,1)  # ひとつ上\ndiag(T,2)　# ２つ上","category":"page"},{"location":"21_NewtonsMethod.html#Newton法","page":"Newton法","title":"Newton法","text":"","category":"section"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"Newton法とは，非線形方程式 f(x) = 0 の近似値を求めるための反復解法として最も有名なものである． 1669年に，万有引力で有名な Isaac Newton が 現在のNewton法に相当する方法を考案した．[Yamamoto] ","category":"page"},{"location":"21_NewtonsMethod.html#Newton法のアルゴリズム","page":"Newton法","title":"Newton法のアルゴリズム","text":"","category":"section"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"[Yamamoto]: 山本哲朗，「Newton法とその周辺」, 1985.","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":" f(x) を実数全体で定義された C^1 級の実数値関数（f は微分可能で，導関数 f は連続である）とする．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"方程式 f(x) = 0 の解 alpha の近似値を，次の漸化式で反復計算する方法を Newton法 あるいはNewton–Raphson法という．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"x_n+1 = x_n - fracf(x_n)f(x_n) qquad (n ge 0) ","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"ただし，初項 x_0 は適切な値に取り，x=alpha の近傍で f(x) neq 0 が成り立っているとする．[Note1]","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"[Note1]:  f(alpha) neq 0 ならば， x が alpha の十分近くにあるかぎりは f(x) neq 0 が保証される．しかし，「十分近く」が具体的にどれぐらいなのかは一般にはわからない．ちなみに，f(alpha) = 0 でも収束はするが，収束速度は低下する．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"反復計算は x_n+1を漸化式により計算したとき， 前のステップのx_nとの差の絶対値が十分小さくなったら打ち切るものとする：","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"  x_n+1 - x_n   mathtttol","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"ただし，mathtttol0はあらかじめ決めておいた（小さな値の）定数である．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"Newton法のアルゴリズムをまとめると次のようになる．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"x_0 を与える．\nk = 0 1 2  N に対して，次の3-4を繰り返す．\nquad x_k+1 を計算する．\nquad x_k+1 - x_k  mathtttol ならばループを抜ける．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"ただし，Nを最大反復回数である． 一般にNewton法では最大反復回数は定めないが， 無限ループの発生させないために設定しておいたほうがよい．","category":"page"},{"location":"21_NewtonsMethod.html#Newton法の局所収束性について","page":"Newton法","title":"Newton法の局所収束性について","text":"","category":"section"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"Newton法の反復列は一般には収束するとは限らないが，x_0 が alpha に 十分近くにある場合は 2次収束する ことが知られている．つまり，ある n に依存しない定数 Cが存在し，十分大きな n に対して 次が成り立つ．","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":" x_n+1 - alpha le C x_n - alpha^2","category":"page"},{"location":"21_NewtonsMethod.html","page":"Newton法","title":"Newton法","text":"Newton法の大域的な収束性は一般にはわからない．","category":"page"},{"location":"01_Juliaの起動.html#Juliaの起動","page":"Juliaの起動","title":"Juliaの起動","text":"","category":"section"},{"location":"01_Juliaの起動.html#全学計算機システム","page":"Juliaの起動","title":"全学計算機システム","text":"","category":"section"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"全学計算機システムのWindows端末（あるいはリモートデスクトップ） で実行する方法について説明する．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"Windows端末にログイン後，Windowsメニューから Juliaのアイコンを見つけて起動する． あるいは，検索窓から juliaとタイプしてもよい．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"起動したら，念のため，pwd() (print working directory) コマンドでカレントディレクトリを確認しよう．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"julia> pwd()","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"ここでユーザーフォルダー C:¥¥Users¥¥〈ユーザー名〉 と表示されれば問題ないが， 私がリモートデスクトップで試した限りでは， C:¥¥Users¥¥Administrator と表示されるので注意が必要である．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"フォルダー移動は cd() (change director) コマンドで行う．cd()は引数無しで実行すると ユーザーフォルダーに移動する．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"julia> cd()","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"このあと，カレントディレクトリを再度確認．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"julia> pwd()","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"C:¥¥Users¥¥〈ユーザー名〉が出力されれば大丈夫である． もちろん，cd(\"C:¥¥Users¥〈ユーザー名〉\")とベタ打ちしてもよい．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"プロンプト julia> にコマンドを打ち込んで Enterキー押下で実行する．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"println(\"hello, world!\")","category":"page"},{"location":"01_Juliaの起動.html#テキストエディタ-Visual-Stude-Code-の利用","page":"Juliaの起動","title":"テキストエディタ Visual Stude Code の利用","text":"","category":"section"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"テキストエディタ Visual Studio Code で， 次の内容でテキストファイルを作成し，hellow.jlという名前で保存する．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"println(\"hello, world! from hellow.jl\")","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"Juliaのターミナルに移動して","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"julia> include(\"hellow.jl\")","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"を実行すると，hello, world! from hellow.jl と表示されるはずである．","category":"page"},{"location":"01_Juliaの起動.html#Jupyter-Notebook-(本講義では非サポート)","page":"Juliaの起動","title":"Jupyter Notebook (本講義では非サポート)","text":"","category":"section"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"Windowsメニューから Jupyter Notebookを起動する． ブラウザが立ち上がり，カレントフォルダのファイルリストが表示される． 左上側にある Newのプルダウンメニューから Julia 1.7.2 を選択する． そうすると，Juliaカーネルが起動した状態で空の \"ノートブック\" が表示される．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"<img src=\"jupyter-nb-kernel2022.png\" width=\"50%\">","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"In [ ]: の右側に versioninfo() と入力して Shift+Enterを押下するとコマンドが実行される． 以下のように表示されていれば正常と思われる．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"Julia Version 1.7.2\nCommit bf53498635 (2022-02-06 15:21 UTC)\nPlatform Info:\n  OS: Windows (x86_64-w64-mingw32)\n  CPU: Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-12.0.1 (ORCJIT, haswell)\nEnvironment:\n  JULIA_DEPOT_PATH = Z:\\.julia-w","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"プログラムと実行結果がひとつのファイルに収まるし， MarkdownでLaTeXによる数式も記述できるので便利である． レポート提出用のpdfファイルも，メニューFile> Download as > HTML (.html) で変換したhtmlファイルを 印刷でpdfに変換すれば簡単に生成できる．","category":"page"},{"location":"01_Juliaの起動.html","page":"Juliaの起動","title":"Juliaの起動","text":"しかし，現時点では安定した環境であると言い切れないので，本講義ではサポートできない．","category":"page"},{"location":"15_条件分岐.html#条件分岐","page":"条件分岐","title":"条件分岐","text":"","category":"section"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"変数の値によって処理を変えたい場合， if ... [elseif ... else ...] end を用いる．  ","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"例えば，変数 x が x>0 であるときに \"positive\" と表示するには， 次のように記述する．","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x = 1\nif x>0 \n    println(\"$x is positive.\")\nend","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x < 0 のとき \"negative\" と表示する場合は，elseif で条件式を追加すればよい．","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x = -2\nif x > 0 \n    println(\"$x is positive.\")\nelseif x < 0                      # 追加\n    println(\"$x is negative.\")    # 追加\nend","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x<0 でも x>0 でもないときは，x は 0 と言いたいところだが，それ以外の可能性もあるので，  else を用いて次のように書いておこう．","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x = NaN\nif x > 0 \n    println(\"$x is positive.\")\nelseif x < 0\n    println(\"$x is negative.\")\nelse                                      # 追加\n    println(\"$x is zero or something.\")   # 追加\nend","category":"page"},{"location":"15_条件分岐.html#数値に関する等号と比較演算子","page":"条件分岐","title":"数値に関する等号と比較演算子","text":"","category":"section"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"数値どうしを比較する演算子は次の通り．","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"プログラム 条件式\nx == y x=y\nx != y xneq y\nx > y x  y\nx >= y x ge y","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"論理積（and）は &&，論理和 (or) は || が対応している．例えば，","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"1 < 2 && 2 < 3","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"これは次のように書くこともできる．","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"1 < 2 < 3","category":"page"},{"location":"15_条件分岐.html#短絡評価","page":"条件分岐","title":"短絡評価","text":"","category":"section"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x=1\nif x > 0 \n    println(\"$x is positive.\")\nend","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"は && を用いて次のように書くことも多いようである．","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"x=1\nx>0 && println(\"$x is positive.\")","category":"page"},{"location":"15_条件分岐.html","page":"条件分岐","title":"条件分岐","text":"最初に x>0 の評価が行われ， true ならばもう片方の評価が行われる．つまり，println 部分が実行される． もし，false ならば，残りの条件式の評価はスキップされる．","category":"page"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"using Dates; today()","category":"page"},{"location":"index.html#はじめに","page":"はじめに","title":"はじめに","text":"","category":"section"},{"location":"index.html#Julia言語とは","page":"はじめに","title":"Julia言語とは","text":"","category":"section"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"Julia言語は 数値計算向けに設計された汎用プログラミング言語 である．\n数値計算プログラムが書きやすく，実行速度も速い．\n比較的新しい言語である：2018年にバージョン 1.0 がリリースされ[1]，言語仕様が正式なものとなった．\nMATLABやPythonはプログラムを書きやすいが，インタプリタ型言語ゆえに実行速度が遅いというデメリットがある．\nJulia言語ではJITコンパイルなどの現代的な技術を駆使して，プログラムの書きやすさと実行速度を高度なレベルで両立させている．","category":"page"},{"location":"index.html#特徴","page":"はじめに","title":"特徴","text":"","category":"section"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"文法・構文に関してはMATLABから大きな影響を受けている．\nMATLABと同様に数学関数，有理数，複素数，任意精度計算，線形代数，などの数学に関する多数の機能が標準で実装されている．\nMATLABはプロプライエタリ（ソースコード非公開）であるが，Julia言語はオープンソース \nMATLABやPythonはインタプリタ型（＋動的型付け）なのでコードを簡潔に書きやすいが，その代償として実行速度が遅くなる． Julia言語はJITコンパイル等により実行速度の損失を小さく抑えている．実際に，最速のC言語と比べてもおよそ数分の1と評価されている．[2]","category":"page"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"[1]: https://julialang.org/blog/2018/08/one-point-zero/ ","category":"page"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"[2]: https://julialang.org/benchmarks/","category":"page"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"note: Note\nJulia言語は数値計算に最適なプログラミング言語であるが， 数値計算用に特化されているわけではないし， 他の言語ではできないことを可能にするような魔法の言語ではない．   これは裏を返せば，Julia言語に関する知識の大部分は普遍的で他言語で通用するということでもある．","category":"page"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"note: Note\nJuila言語ではプログラムの初回実行時にJITコンパイルが行われる．初回は（JITコンパイル）＋（プログラムの実行時間）がトータルの実行時間になるので，遅く感じるかもしれない． 2回目以降はJITコンパイルは行われないので，プログラム本来の実行時間になる．","category":"page"},{"location":"index.html#参考文献","page":"はじめに","title":"参考文献","text":"","category":"section"},{"location":"index.html","page":"はじめに","title":"はじめに","text":"公式サイト: The Julia Language\n公式ドキュメント(en) ：ここに全て書いてあるので検索してください．\n進藤・佐藤: 「1から始めるJuliaプログラミング」コロナ社，2020.  本学では電子版が閲覧可：Maruzen eBook\nKalicharan: Julia - Bit by Bit, UTICS, Springer, 2021.  SpringerLink(Tulips経由)","category":"page"}]
}
